#! /bin/sh
### BEGIN INIT INFO
# Provides:          milter-manager
# Required-Start:    $remote_fs $network $syslog
# Required-Stop:     $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: milter-manager's init script
# Description:       The milter that manages milters to combine them flexibly.
### END INIT INFO

# Author: Kouhei Sutou <kou@clear-code.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="flexible milter management daemon"
NAME=milter-manager
DAEMON=/usr/sbin/$NAME
USER=
GROUP=
SOCKET_GROUP=
CONNECTION_SPEC=
PIDFILE=/var/run/milter-manager/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
OPTION_ARGS=""

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

DAEMON_ARGS=

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that setup daemon arguments
#
do_setup()
{
    DAEMON_ARGS="--daemon --pid-file ${PIDFILE}"
    if [ -n "${CONNECTION_SPEC}" ]; then
	DAEMON_ARGS="${DAEMON_ARGS} --connection-spec ${CONNECTION_SPEC}"
    fi
    mkdir -p `dirname ${PIDFILE}`
    if [ -n "${USER}" ]; then
	if ! getent passwd | grep -q "^${USER}:"; then
	    echo "$0: user for running milter-manager doesn't exist: ${USER}" >&2
	    exit 1
	fi
	chown -R ${USER} `dirname ${PIDFILE}`
	DAEMON_ARGS="${DAEMON_ARGS} --user-name ${USER}"
    else
	chown -R milter-manager `dirname ${PIDFILE}`
    fi
    if [ -n "${GROUP}" ]; then
	if ! getent group | grep -q "^${GROUP}:"; then
	    echo "$0: group for running milter-manager doesn't exist: ${GROUP}" >&2
	    exit 1
	fi
	chgrp -R ${GROUP} `dirname ${PIDFILE}`
	DAEMON_ARGS="${DAEMON_ARGS} --group-name ${GROUP}"
    else
	chgrp -R milter-manager `dirname ${PIDFILE}`
    fi
    if [ -n "${SOCKET_GROUP}" ]; then
	if ! getent group | grep -q "^${SOCKET_GROUP}:"; then
	    echo "$0: group for socket doesn't exist: ${SOCKET_GROUP}" >&2
	    exit 1
	fi
	DAEMON_ARGS="${DAEMON_ARGS} --unix-socket-group ${SOCKET_GROUP}"
    fi
    DAEMON_ARGS="${DAEMON_ARGS} ${OPTION_ARGS}"
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	do_setup
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	do_setup
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	do_setup
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  status)
	status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit $?
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload|status}" >&2
	exit 3
	;;
esac

:
