<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE refentry 
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="ruby-milter-tutorial">
<refmeta>
  <refentrytitle role='top_of_page' id='ruby-milter-tutorial.top_of_page'>Rubyでmilter開発</refentrytitle>
  <refmiscinfo>milter managerライブラリ</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>Rubyでmilter開発</refname>
  <refpurpose>Rubyバインディングのチュートリアル</refpurpose>
</refnamediv>
<refsect1>
  <title>このドキュメントについて</title>
  <para>milter managerが提供するライブラリを用いてRubyでmilterを開発 する方法を説明します。</para>
  <para>
  milterプロトコルの説明は
  <ulink url='http://www.milter.org'>milter.org</ulink>
  の
  <ulink url='https://www.milter.org/developers'>開発者向けドキュメント</ulink>
  を参照してください。
</para>
</refsect1>

<refsect1>
  <title>インストール</title>
  <para>Rubyでmilterを開発する場合はconfigure時に--enable-ruby-milterオ プションを指定します。Debian GNU/Linux、Ubuntu、CentOS用のパッ ケージでは専用のパッケージがあるのでそれをインストールします。</para>
  <para>Debian GNU/Linux、Ubuntuの場合:</para>
  <programlisting>% sudo aptitude -V -D -y install libmilter-toolkit-ruby1.8</programlisting>
  <para>CentOSの場合:</para>
  <programlisting>% sudo yum install -y ruby-milter-toolkit</programlisting>
  <para>パッケージがない環境では以下のように configureに--enable-ruby-milterオプションを指定してください。</para>
  <programlisting>% ./configure --enable-ruby-milter</programlisting>
  <para>インストールが成功しているかは以下のコマンドで確認できます。</para>
  <programlisting>% ruby -r milter -e 'p Milter::VERSION'
[1, 8, 0]</programlisting>
  <para>バージョン情報が出力されればインストールは成功しています。</para>
</refsect1>

<refsect1>
  <title>概要</title>
  <para>Rubyで開発したmilterは以下のようになります。</para>
  <programlisting>require 'milter/client'

class Session &lt; Milter::ClientSession
  def initialize(context)
    super(context)
    # 初期化処理
  end

  def connect(host, address)
    # ...
  end

  # その他のコールバック定義
end

command_line = Milter::Client::CommandLine.new
command_line.run do |client, _options|
  client.register(Session)
end</programlisting>
  <para>それでは、指定された正規表現を含むメールを拒否するmilterを作っ てみましょう。</para>
</refsect1>

<refsect1>
  <title>コールバック</title>
  <para>イベントが発生する毎にmilterのコールバックメソッドが呼び出さ れます。ほとんどのイベントには付加情報があります。イベントの 付加情報の受け渡し方法は2種類あります。1つはコールバックの引 数として渡される方法で、もう1つはマクロとして渡される方法です。 マクロについては後述します。ここではコールバックの引数として 渡される情報についてだけ説明します。</para>
  <para>以下がコールバックメソッドとその引数の一覧です。一覧を見た後 に、今回のmilterで必要なコールバックを選びます。</para>
  <variablelist>
  <varlistentry>
  <term id='ruby-milter-tutorial.connect'>connect(host, address)</term>
  <listitem>
  <para>SMTPクライアントがSMTPサーバに接続したときに呼ばれます。</para>
  <para>
  <varname>host</varname>
  は接続してきたSMTPクライアントのホスト名で、
  <varname>address</varname>
  はアドレスです。
</para>
  <para>例えば、localhostから接続した場合は以下のようになります。</para>
  <variablelist>
  <varlistentry>
  <term id='ruby-milter-tutorial.host'>host</term>
  <listitem>
  <para>&quot;localhost&quot;</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.address'>address</term>
  <listitem>
  <para>
  <code>inet:45875@[127.0.0.1]</code>
  を表している
  <code>Milter::SocketAddress::IPv4</code>
  オブジェクト。
</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.helo'>helo(fqdn)</term>
  <listitem>
  <para>SMTPクライアントがHELOまたはEHLOコマンドを送ったときに呼 ばれます。</para>
  <para>
  <varname>fqdn</varname>
  はHELO/EHLOで報告したFQDNです。
</para>
  <para>例えば、「EHLO mail.example.com」とした場合は以下のように なります。</para>
  <variablelist>
  <varlistentry>
  <term id='ruby-milter-tutorial.fqdn'>fqdn</term>
  <listitem>
  <para>&quot;mail.example.com&quot;</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.envelope-from'>envelope_from(from)</term>
  <listitem>
  <para>SMTPクライアントがMAIL FROMコマンドを送ったときに呼ばれま す。</para>
  <para>
  <varname>from</varname>
  はMAIL FROMで報告した送信元アドレスです。
</para>
  <para>例えば、「MAIL FROM: &lt;user@example.com&gt;」とした場合は以下 のようになります。</para>
  <variablelist>
  <varlistentry>
  <term id='ruby-milter-tutorial.from'>from</term>
  <listitem>
  <para>&quot;&lt;user@example.com&gt;&quot;</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.envelope-recipient'>envelope_recipient(to)</term>
  <listitem>
  <para>SMTPクライアントがRCPT TOコマンドを送ったときに呼ばれます。 複数回RCPT TOコマンドを送った場合は複数回呼ばれます。</para>
  <para>
  <varname>to</varname>
  はRCPT TOで報告した送信先アドレスです。
</para>
  <para>例えば、「RCPT TO: &lt;user@example.com&gt;」とした場合は以下 のようになります。</para>
  <variablelist>
  <varlistentry>
  <term id='ruby-milter-tutorial.to'>to</term>
  <listitem>
  <para>&quot;&lt;user@example.com&gt;&quot;</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.data'>data</term>
  <listitem>
  <para>SMTPクライアントがDATAコマンドを送ったときに呼ばれます。</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.header'>header(name, value)</term>
  <listitem>
  <para>送信するメールの中にあるヘッダーの数だけ呼ばれます。</para>
  <para>
  <varname>name</varname>
  はヘッダーの名前で、
  <varname>value</varname>
  は値です。
</para>
  <para>例えば、「Subject: Hello!」というヘッダーがあった場合は以 下のようになります。</para>
  <variablelist>
  <varlistentry>
  <term id='ruby-milter-tutorial.name'>name</term>
  <listitem>
  <para>&quot;Subject&quot;</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.value'>value</term>
  <listitem>
  <para>&quot;Hello!&quot;</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.end-of-header'>end_of_header</term>
  <listitem>
  <para>送信するメールのヘッダー部分が終わったら呼ばれます。</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.body'>body(chunk)</term>
  <listitem>
  <para>送信するメールの本文が送られてきたら呼ばれます。本文が小 さいときは1回だけ呼ばれますが、大きい場合はいくつかの塊に 分割されて複数回呼ばれます。</para>
  <para>
  <varname>chunk</varname>
  は分割された本文です。
</para>
  <para>例えば、本文が「Hi!」だけであれば、1回だけ呼ばれて、以下 のような値になります。</para>
  <variablelist>
  <varlistentry>
  <term id='ruby-milter-tutorial.chunk'>chunk</term>
  <listitem>
  <para>&quot;Hi!&quot;</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.end-of-message'>end_of_message</term>
  <listitem>
  <para>SMTPクライアントがデータ終了を表す「&lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;」を 送ったときに呼ばれます。</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.abort'>abort(state)</term>
  <listitem>
  <para>SMTPのトランザクションがリセットされたときに呼ばれます。 具体的にはend_of_messageの後や、SMTPコマンドのRSETが送られたときです。</para>
  <para>
  <varname>state</varname>
  はabortが呼び出されたタイミングを表すオブジェクトです。
</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.unknown'>unknown(command)</term>
  <listitem>
  <para>milterプロトコルで定義されていないコマンドが与えられたときに 呼ばれます。</para>
  <para>
  <varname>command</varname>
  は与えられたコマンド名です。
</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.reset'>reset</term>
  <listitem>
  <para>initializeのときとメールトランザクションが終了したときに呼ばれます。</para>
  <para>
  <ulink url='http://tools.ietf.org/html/rfc5321#section-3.3'>メールトランザクション</ulink>
  が終了するのは以下のときです。
</para>
  <itemizedlist>
  <listitem>
  <para>
  <code>abort</code>
  が呼ばれるとき
</para>
</listitem>
  <listitem>
  <para>
  <code>reject</code>
  を呼んだ時
</para>
</listitem>
  <listitem>
  <para>
  <code>temporary_failure</code>
  を呼んだ時
</para>
</listitem>
  <listitem>
  <para>
  <code>discard</code>
  を呼んだ時
</para>
</listitem>
  <listitem>
  <para>
  <code>accept</code>
  を呼んだ時
</para>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
  <varlistentry>
  <term id='ruby-milter-tutorial.finished'>finished</term>
  <listitem>
  <para>milterプロトコルの処理が完了したときに呼ばれます。 TODO: 呼ばれるタイミングについて書く</para>
</listitem>
</varlistentry>
</variablelist>
</refsect1>

<refsect1>
  <title>利用するコールバック</title>
  <para>今回作るmilterは定された正規表現を含むメールを拒否するmilter です。正規表現はSubjectまたはメッセージ本文にマッチさせるこ とにします。とすると、必要になるコールバックはヘッダー毎に呼 び出されるheaderとメッセージ本文毎に呼び出されるbodyです。雛 形は以下のようになります。</para>
  <programlisting>require 'milter/client'

class MilterRegexp &lt; Milter::ClientSession
  def initialize(context, regexp)
    super(context)
    @regexp = regexp
  end

  def header(name, value)
    # ... Subjectをチェック
  end

  def body(chunk)
    # chunkをチェック
  end
end

command_line = Milter::Client::CommandLine.new
command_line.run do |client, _options|
  # バイアグラを含むメールを拒否
  client.register(MilterRegexp, /viagra/i)
end</programlisting>
</refsect1>

<refsect1>
  <title>Subjectのチェック</title>
  <para>まず、Subjectをチェックしましょう。</para>
  <programlisting>class MilterRegexp &lt; Milter::ClientSession
  # ...
  def header(name, value)
    case name
    when /\ASubject\z/i
      if @regexp =~ value
        reject
      end
    end
  end
  # ...
end</programlisting>
  <para>ヘッダー名（name）がSubjectのときに、ヘッダーの値（value）が 指定された正規表現（@regexp）にマッチしていれば拒否 （reject）しています。自然に書けていますね。</para>
</refsect1>

<refsect1>
  <title>動作確認</title>
  <para>それでは、実際に動かして試してみましょう。</para>
  <para>現在は、以下のようになっているはずです。</para>
  <programlisting>require 'milter/client'

class MilterRegexp &lt; Milter::ClientSession
  def initialize(context, regexp)
    super(context)
    @regexp = regexp
  end

  def header(name, value)
    case name
    when /\ASubject\z/i
      if @regexp =~ value
        reject
      end
    end
  end

  def body(chunk)
    # chunkをチェック
  end
end

command_line = Milter::Client::CommandLine.new
command_line.run do |client, _options|
  # バイアグラを含むメールを拒否
  client.register(MilterRegexp, /viagra/i)
end</programlisting>
  <para>この状態ですでにmilterとして実行可能です。milter-regexp.rbと いうファイル名で保存した場合、以下のように実行します。-vオプ ションは詳細なログを出力するためのオプションで、動作を確認し やすいようにつけています。</para>
  <programlisting>% ruby milter-regexp.rb -v</programlisting>
  <para>milterはデフォルトではフォアグラウンドで動作します。別の端末 からアクセスして動作を確認しましょう。</para>
  <para>
  milterのテストには
  <link linkend='milter-test-server'>milter-test-server</link>
  が便利です。Rubyで 実装されたmilterはデフォルトで「inet:20025@localhost」で起動 するので、そのアドレスに接続します。
</para>
  <programlisting>% milter-test-server -s inet:20025
status: pass
elapsed-time: 0.00254348 seconds</programlisting>
  <para>正常に接続できた場合は以上のように「status: pass」と表示され ます。milterを起動している端末も確認してみましょう。以下のよ うに表示されているはずです。</para>
  <programlisting>[2010-08-01T05:44:34.157419Z]: [client][accept] 10:inet:55651@127.0.0.1
[2010-08-01T05:44:34.157748Z]: [1] [client][start]
[2010-08-01T05:44:34.157812Z]: [1] [reader][watch] 4
[2010-08-01T05:44:34.157839Z]: [1] [writer][watch] 5
[2010-08-01T05:44:34.158050Z]: [1] [reader] reading from io channel...
[2010-08-01T05:44:34.158140Z]: [1] [command-decoder][negotiate]
[2010-08-01T05:44:34.158485Z]: [1] [client][reply][negotiate] #&lt;MilterOption version=&lt;6&gt; action=&lt;add-headers|change-body|add-envelope-recipient|delete-envelope-recipient|change-headers|quarantine|change-envelope-from|add-envelope-recipient-with-parameters|set-symbol-list&gt; step=&lt;no-connect|no-helo|no-envelope-from|no-envelope-recipient|no-end-of-header|no-unknown|no-data|skip|envelope-recipient-rejected&gt;&gt;
[2010-08-01T05:44:34.158605Z]: [1] [client][reply][negotiate][continue]
[2010-08-01T05:44:34.158895Z]: [1] [reader] reading from io channel...
[2010-08-01T05:44:34.158970Z]: [1] [command-decoder][header] &lt;From&gt;=&lt;&lt;kou+send@example.com&gt;&gt;
[2010-08-01T05:44:34.159092Z]: [1] [client][reply][header][continue]
[2010-08-01T05:44:34.159207Z]: [1] [reader] reading from io channel...
[2010-08-01T05:44:34.159269Z]: [1] [command-decoder][header] &lt;To&gt;=&lt;&lt;kou+receive@example.com&gt;&gt;
[2010-08-01T05:44:34.159373Z]: [1] [client][reply][header][continue]
[2010-08-01T05:44:34.159485Z]: [1] [reader] reading from io channel...
[2010-08-01T05:44:34.159544Z]: [1] [command-decoder][body] &lt;71&gt;
[2010-08-01T05:44:34.159656Z]: [1] [client][reply][body][continue]
[2010-08-01T05:44:34.159774Z]: [1] [reader] reading from io channel...
[2010-08-01T05:44:34.159842Z]: [1] [command-decoder][define-macro] &lt;E&gt;
[2010-08-01T05:44:34.159882Z]: [1] [command-decoder][end-of-message] &lt;0&gt;
[2010-08-01T05:44:34.159941Z]: [1] [client][reply][end-of-message][continue]
[2010-08-01T05:44:34.160034Z]: [1] [command-decoder][quit]
[2010-08-01T05:44:34.160081Z]: [1] [agent][shutdown]
[2010-08-01T05:44:34.160118Z]: [1] [agent][shutdown][reader]
[2010-08-01T05:44:34.160162Z]: [1] [reader][eof]
[2010-08-01T05:44:34.160199Z]: [1] [reader] shutdown requested.
[2010-08-01T05:44:34.160231Z]: [1] [reader] removing reader watcher.
[2010-08-01T05:44:34.160299Z]: [1] [writer][shutdown]
[2010-08-01T05:44:34.160393Z]: [0] [reader][dispose]
[2010-08-01T05:44:34.160452Z]: [client][finisher][run]
[2010-08-01T05:44:34.160492Z]: [1] [client][finish]
[2010-08-01T05:44:34.160536Z]: [1] [client][rest] []
[2010-08-01T05:44:34.160578Z]: [sessions][finished] 1(+1) 0</programlisting>
  <para>何も出力されていない場合はそもそもmilterに接続できていません。 milterが起動しているか、milter-test-serverに正しいアドレスを 指定しているかを確認してください。</para>
  <para>それでは、Subjectに「viagra」と含んだメールの場合の動作を確 認しましょう。「--header 'Subject:Buy viagra!!!'」というオプ ションを指定することでそのようなメールの動作を再現します。</para>
  <programlisting>% milter-test-server -s inet:20025 --header 'Subject:Buy viagra!!!'
status: reject
elapsed-time: 0.00144477 seconds</programlisting>
  <para>「status: reject」とでているので、期待通り拒否していることが 確認できます。</para>
  <para>milterの端末の方にも以下のようなログがでているはずです。</para>
  <programlisting>...
[2010-08-01T05:49:49.275257Z]: [2] [command-decoder][header] &lt;Subject&gt;=&lt;Buy viagra!!!&gt;
[2010-08-01T05:49:49.275405Z]: [2] [client][reply][header][reject]
...</programlisting>
  <para>Subjectヘッダーのときにrejectしていることがわかります。</para>
  <para>MTAなしでmilterをテストできるコマンドや詳細なログ出力など、 milter managerはmilterの開発に便利なツール・ライブラリを提供 しています。</para>
</refsect1>

<refsect1>
  <title>メッセージ本体のチェック</title>
  <para>次にメッセージ本体をチェックしましょう。</para>
  <programlisting>class MilterRegexp &lt; Milter::ClientSession
  def body(chunk)
    if @regexp =~ chunk
      reject
    end
  end
end</programlisting>
  <para>メッセージ本文の一部（chunk）が指定された正規表現（@regexp） にマッチしていれば拒否（reject）しています。こちらも自然に書 けていますね。</para>
  <para>試してみましょう。milter-test-serverは「--body」オプションで メッセージ本文を指定できます。</para>
  <programlisting>% tool/milter-test-server -s inet:20025 --body 'Buy viagra!!!'
status: reject
elapsed-time: 0.00195496 seconds</programlisting>
  <para>「status: reject」となっているので、期待通り動作しています。</para>
</refsect1>

<refsect1>
  <title>問題点</title>
  <para>このmilterは説明のために簡略化されているため、いくつか問題点 があります。例えば、以下のようなメールに対しては期待通り動き ません。</para>
  <orderedlist>
  <listitem>
  <para>ヘッダーの値がMIMEエンコードされている場合。例えば、 「=?ISO-2022-JP?B?GyRCJVAlJCUiJTAlaRsoQnZpYWdyYQ==?=」は デコードすると「バイアグラviagra」になるが、この場合は正 規表現にマッチしないため、拒否しない。</para>
</listitem>
  <listitem>
  <para>メッセージ本体で単語が複数のチャンクにまたがった場合。 例えば、1つめのチャンクで「via」がきて2つめのチャンク で「gra」がきた場合は正規表現にマッチしないため、拒否 しない。</para>
</listitem>
</orderedlist>
  <para>ヘッダーの値に関しては以下のようにNKFなどを使ってMIMEエンコー ドをデコードすれば解決できます。</para>
  <programlisting>require 'nkf'

class MilterRegexp &lt; Milter::ClientSession
  # ...
  def header(name, value)
    case name
    when /\ASubject\z/i
      if @regexp =~ NKF.nkf(&quot;-w&quot;, value)
        reject
      end
    end
  end
  # ...
end</programlisting>
  <para>メッセージ本体に関しては、メッセージ本文を全部受信した後にも チェックする方法があります。</para>
  <programlisting>class MilterRegexp &lt; Milter::ClientSession
  ...
  def initialize(context, regexp)
    super(context)
    @regexp = regexp
    @body = &quot;&quot;
  end

  def body(chunk)
    if @regexp =~ chunk
      reject
    end
    @body &lt;&lt; chunk
  end

  def end_of_mesasge
    if @regexp =~ @body
      reject
    end
  end
  ...
end</programlisting>
  <para>複数のチャンクにわかれた状態をテストするためには以下のように 複数回「--body」オプションを指定します。</para>
  <programlisting>% milter-test-server -s inet:20025 --body 'Buy via' --body 'gra!!!'
status: reject
elapsed-time: 0.00379063 seconds</programlisting>
  <para>このように複数のチャンクにわかれてしまった場合でも期待通りに 動きます。</para>
  <para>ただし、これではすべてのメッセージをメモリ上に置いてしまうな ど、効率の問題があります。また、メッセージ本文がBASE64でエン コードされている場合も動作しないという問題があります。これら は、ストリームとして処理したり、Content-Typeヘッダーの値など を確認した上でメッセージ本文を処理したりする必要があります。</para>
  <para>
  メールを解析するライブラリとして
  <ulink url='http://github.com/mikel/mail'>Mail</ulink>
  があるので、それ を使うとよいでしょう。
</para>
</refsect1>

<refsect1>
  <title>まとめ</title>
  <para>Rubyでmilterを作る方法について、実際にmilterを作りながら説明 しました。Rubyを使うと簡単にmilterを実装できるので、ぜひ使っ てみてください。</para>
</refsect1>
</refentry>
