<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="milter-manager-libmilter/mfapi.h">
<refmeta>
<refentrytitle role="top_of_page" id="milter-manager-libmilter/mfapi.h.top_of_page">libmilter/mfapi.h</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  MILTER-MANAGER Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>libmilter/mfapi.h</refname>
<refpurpose>libmilter compatible API.</refpurpose>
</refnamediv>

<refsynopsisdiv id="milter-manager-libmilter/mfapi.h.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>#define             <link linkend="SMFI-VERSION:CAPS">SMFI_VERSION</link>
#define             <link linkend="SM-LM-VRS-MAJOR:CAPS">SM_LM_VRS_MAJOR</link>                     (version)
#define             <link linkend="SM-LM-VRS-MINOR:CAPS">SM_LM_VRS_MINOR</link>                     (version)
#define             <link linkend="SM-LM-VRS-PLVL:CAPS">SM_LM_VRS_PLVL</link>                      (version)
#define             <link linkend="MI-SUCCESS:CAPS">MI_SUCCESS</link>
#define             <link linkend="MI-FAILURE:CAPS">MI_FAILURE</link>
typedef             <link linkend="SMFICTX:CAPS">SMFICTX</link>;
typedef             <link linkend="SMFICTX-PTR:CAPS">SMFICTX_PTR</link>;
typedef             <link linkend="smfiDesc-str">smfiDesc_str</link>;
typedef             <link linkend="smfiDesc-ptr">smfiDesc_ptr</link>;
typedef             <link linkend="sfsistat">sfsistat</link>;
#define             <link linkend="bool">bool</link>
#define             <link linkend="true">true</link>
#define             <link linkend="false">false</link>
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-connect">*xxfi_connect</link>)                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *host_name</parameter>,
                                                         <parameter><link linkend="SOCK-ADDR:CAPS"><type>_SOCK_ADDR</type></link> *address</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-helo">*xxfi_helo</link>)                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *fqdn</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-envfrom">*xxfi_envfrom</link>)                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **arguments</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-envrcpt">*xxfi_envrcpt</link>)                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **arguments</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-header">*xxfi_header</link>)                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *value</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-eoh">*xxfi_eoh</link>)                         (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-body">*xxfi_body</link>)                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-eom">*xxfi_eom</link>)                         (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-abort">*xxfi_abort</link>)                       (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-close">*xxfi_close</link>)                       (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-unknown">*xxfi_unknown</link>)                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *command</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-data">*xxfi_data</link>)                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);
<link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (<link linkend="xxfi-negotiate">*xxfi_negotiate</link>)                   (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><type>unsigned long </type> actions</parameter>,
                                                         <parameter><type>unsigned long </type> steps</parameter>,
                                                         <parameter><type>unsigned long </type> unused0</parameter>,
                                                         <parameter><type>unsigned long </type> unused1</parameter>,
                                                         <parameter>unsigned <link linkend="long"><type>long</type></link> *actions_output</parameter>,
                                                         <parameter>unsigned <link linkend="long"><type>long</type></link> *steps_output</parameter>,
                                                         <parameter>unsigned <link linkend="long"><type>long</type></link> *unused0_output</parameter>,
                                                         <parameter>unsigned <link linkend="long"><type>long</type></link> *unused1_output</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-opensocket">smfi_opensocket</link>                     (<parameter><link linkend="bool"><type>bool</type></link> remove_socket</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-register">smfi_register</link>                       (<parameter><type>struct smfiDesc</type> description</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-main">smfi_main</link>                           (<parameter><type>void</type></parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-setbacklog">smfi_setbacklog</link>                     (<parameter><link linkend="int"><type>int</type></link> backlog</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-setdbg">smfi_setdbg</link>                         (<parameter><link linkend="int"><type>int</type></link> level</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-settimeout">smfi_settimeout</link>                     (<parameter><link linkend="int"><type>int</type></link> timeout</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-setconn">smfi_setconn</link>                        (<parameter><link linkend="char"><type>char</type></link> *connection_spec</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-stop">smfi_stop</link>                           (<parameter><type>void</type></parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-version">smfi_version</link>                        (<parameter>unsigned <link linkend="int"><type>int</type></link> *major</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *minor</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *patch_level</parameter>);
#define             <link linkend="SMFIF-ADDHDRS:CAPS">SMFIF_ADDHDRS</link>
#define             <link linkend="SMFIF-CHGBODY:CAPS">SMFIF_CHGBODY</link>
#define             <link linkend="SMFIF-MODBODY:CAPS">SMFIF_MODBODY</link>
#define             <link linkend="SMFIF-ADDRCPT:CAPS">SMFIF_ADDRCPT</link>
#define             <link linkend="SMFIF-DELRCPT:CAPS">SMFIF_DELRCPT</link>
#define             <link linkend="SMFIF-CHGHDRS:CAPS">SMFIF_CHGHDRS</link>
#define             <link linkend="SMFIF-QUARANTINE:CAPS">SMFIF_QUARANTINE</link>
#define             <link linkend="SMFIF-CHGFROM:CAPS">SMFIF_CHGFROM</link>
#define             <link linkend="SMFIF-ADDRCPT-PAR:CAPS">SMFIF_ADDRCPT_PAR</link>
#define             <link linkend="SMFIF-SETSYMLIST:CAPS">SMFIF_SETSYMLIST</link>
#define             <link linkend="SMFIS-CONTINUE:CAPS">SMFIS_CONTINUE</link>
#define             <link linkend="SMFIS-REJECT:CAPS">SMFIS_REJECT</link>
#define             <link linkend="SMFIS-DISCARD:CAPS">SMFIS_DISCARD</link>
#define             <link linkend="SMFIS-ACCEPT:CAPS">SMFIS_ACCEPT</link>
#define             <link linkend="SMFIS-TEMPFAIL:CAPS">SMFIS_TEMPFAIL</link>
#define             <link linkend="SMFIS-NOREPLY:CAPS">SMFIS_NOREPLY</link>
#define             <link linkend="SMFIS-SKIP:CAPS">SMFIS_SKIP</link>
#define             <link linkend="SMFIS-ALL-OPTS:CAPS">SMFIS_ALL_OPTS</link>
#define             <link linkend="SMFIM-CONNECT:CAPS">SMFIM_CONNECT</link>
#define             <link linkend="SMFIM-HELO:CAPS">SMFIM_HELO</link>
#define             <link linkend="SMFIM-ENVFROM:CAPS">SMFIM_ENVFROM</link>
#define             <link linkend="SMFIM-ENVRCPT:CAPS">SMFIM_ENVRCPT</link>
#define             <link linkend="SMFIM-DATA:CAPS">SMFIM_DATA</link>
#define             <link linkend="SMFIM-EOM:CAPS">SMFIM_EOM</link>
#define             <link linkend="SMFIM-EOH:CAPS">SMFIM_EOH</link>
#define             <link linkend="SMFIP-NOCONNECT:CAPS">SMFIP_NOCONNECT</link>
#define             <link linkend="SMFIP-NOHELO:CAPS">SMFIP_NOHELO</link>
#define             <link linkend="SMFIP-NOMAIL:CAPS">SMFIP_NOMAIL</link>
#define             <link linkend="SMFIP-NORCPT:CAPS">SMFIP_NORCPT</link>
#define             <link linkend="SMFIP-NOBODY:CAPS">SMFIP_NOBODY</link>
#define             <link linkend="SMFIP-NOHDRS:CAPS">SMFIP_NOHDRS</link>
#define             <link linkend="SMFIP-NOEOH:CAPS">SMFIP_NOEOH</link>
#define             <link linkend="SMFIP-NR-HDR:CAPS">SMFIP_NR_HDR</link>
#define             <link linkend="SMFIP-NOHREPL:CAPS">SMFIP_NOHREPL</link>
#define             <link linkend="SMFIP-NOUNKNOWN:CAPS">SMFIP_NOUNKNOWN</link>
#define             <link linkend="SMFIP-NODATA:CAPS">SMFIP_NODATA</link>
#define             <link linkend="SMFIP-SKIP:CAPS">SMFIP_SKIP</link>
#define             <link linkend="SMFIP-RCPT-REJ:CAPS">SMFIP_RCPT_REJ</link>
#define             <link linkend="SMFIP-NR-CONN:CAPS">SMFIP_NR_CONN</link>
#define             <link linkend="SMFIP-NR-HELO:CAPS">SMFIP_NR_HELO</link>
#define             <link linkend="SMFIP-NR-MAIL:CAPS">SMFIP_NR_MAIL</link>
#define             <link linkend="SMFIP-NR-RCPT:CAPS">SMFIP_NR_RCPT</link>
#define             <link linkend="SMFIP-NR-DATA:CAPS">SMFIP_NR_DATA</link>
#define             <link linkend="SMFIP-NR-UNKN:CAPS">SMFIP_NR_UNKN</link>
#define             <link linkend="SMFIP-NR-EOH:CAPS">SMFIP_NR_EOH</link>
#define             <link linkend="SMFIP-NR-BODY:CAPS">SMFIP_NR_BODY</link>
#define             <link linkend="SMFIP-HDR-LEADSPC:CAPS">SMFIP_HDR_LEADSPC</link>
<link linkend="char"><returnvalue>char</returnvalue></link> *              <link linkend="smfi-getsymval">smfi_getsymval</link>                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-setreply">smfi_setreply</link>                       (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *return_code</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *extended_code</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *message</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-setmlreply">smfi_setmlreply</link>                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *return_code</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *extended_code</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-addheader">smfi_addheader</link>                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *value</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-chgheader">smfi_chgheader</link>                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> index</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *value</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-insheader">smfi_insheader</link>                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> index</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *value</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-chgfrom">smfi_chgfrom</link>                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *mail</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *arguments</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-addrcpt">smfi_addrcpt</link>                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *recipient</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-addrcpt-par">smfi_addrcpt_par</link>                    (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *recipient</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *arguments</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-delrcpt">smfi_delrcpt</link>                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *recipient</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-progress">smfi_progress</link>                       (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-replacebody">smfi_replacebody</link>                    (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *new_body</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> new_body_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-quarantine">smfi_quarantine</link>                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *reason</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-setpriv">smfi_setpriv</link>                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link> *              <link linkend="smfi-getpriv">smfi_getpriv</link>                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="smfi-setsymlist">smfi_setsymlist</link>                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> state</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *macros</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="milter-manager-libmilter/mfapi.h.description" role="desc">
<title role="desc.title">Description</title>
<para>
libmilter/mfapi.h provides Sendmail's libmilter
compatible API. You can use this library instead of
Sendmail's libmilter. See also <ulink
url="https://www.milter.org/developers/api/">API
Documentation on milter.org</ulink>.
</para>
</refsect1>
<refsect1 id="milter-manager-libmilter/mfapi.h.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="SMFI-VERSION:CAPS" role="macro">
<title>SMFI_VERSION</title>
<indexterm zone="SMFI-VERSION:CAPS"><primary>SMFI_VERSION</primary></indexterm>
<programlisting>#  define SMFI_VERSION&#160;0x01000001
</programlisting>
<para>
libmilter version number.
</para></refsect2>
<refsect2 id="SM-LM-VRS-MAJOR:CAPS" role="macro">
<title>SM_LM_VRS_MAJOR()</title>
<indexterm zone="SM-LM-VRS-MAJOR:CAPS"><primary>SM_LM_VRS_MAJOR</primary></indexterm>
<programlisting>#define SM_LM_VRS_MAJOR(version)&#160;(((version) &amp; 0x7f000000) &gt;&gt; 24)
</programlisting>
<para>
Extracts major version number from <parameter>version</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara>the version number.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>major version number.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SM-LM-VRS-MINOR:CAPS" role="macro">
<title>SM_LM_VRS_MINOR()</title>
<indexterm zone="SM-LM-VRS-MINOR:CAPS"><primary>SM_LM_VRS_MINOR</primary></indexterm>
<programlisting>#define SM_LM_VRS_MINOR(version)&#160;(((version) &amp; 0x007fff00) &gt;&gt; 8)
</programlisting>
<para>
Extracts minor version number from <parameter>version</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara>the version number.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>minor version number.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SM-LM-VRS-PLVL:CAPS" role="macro">
<title>SM_LM_VRS_PLVL()</title>
<indexterm zone="SM-LM-VRS-PLVL:CAPS"><primary>SM_LM_VRS_PLVL</primary></indexterm>
<programlisting>#define SM_LM_VRS_PLVL(version)		((version) &amp; 0x0000007f)
</programlisting>
<para>
Extracts patch level from <parameter>version</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara>the version number.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>patch level.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="MI-SUCCESS:CAPS" role="macro">
<title>MI_SUCCESS</title>
<indexterm zone="MI-SUCCESS:CAPS"><primary>MI_SUCCESS</primary></indexterm>
<programlisting>#define MI_SUCCESS&#160;0
</programlisting>
<para>
Indicates an operation is done successfully.
</para></refsect2>
<refsect2 id="MI-FAILURE:CAPS" role="macro">
<title>MI_FAILURE</title>
<indexterm zone="MI-FAILURE:CAPS"><primary>MI_FAILURE</primary></indexterm>
<programlisting>#define MI_FAILURE&#160;(-1)
</programlisting>
<para>
Indicates an operation is failed.
</para></refsect2>
<refsect2 id="SMFICTX:CAPS" role="typedef">
<title>SMFICTX</title>
<indexterm zone="SMFICTX:CAPS"><primary>SMFICTX</primary></indexterm>
<programlisting>typedef struct smfi_str  SMFICTX;
</programlisting>
<para>
Holds information for a milter session. <link linkend="SMFICTX:CAPS"><literal>SMFICTX</literal></link> is
created for each milter session. <link linkend="SMFICTX:CAPS"><literal>SMFICTX</literal></link> is the most
important object in libmilter API.
</para></refsect2>
<refsect2 id="SMFICTX-PTR:CAPS" role="typedef">
<title>SMFICTX_PTR</title>
<indexterm zone="SMFICTX-PTR:CAPS"><primary>SMFICTX_PTR</primary></indexterm>
<programlisting>typedef struct smfi_str *SMFICTX_PTR;
</programlisting>
<para>
The pointer type of <link linkend="SMFICTX:CAPS"><literal>SMFICTX</literal></link>.
</para></refsect2>
<refsect2 id="smfiDesc-str" role="typedef">
<title>smfiDesc_str</title>
<indexterm zone="smfiDesc-str"><primary>smfiDesc_str</primary></indexterm>
<programlisting>typedef struct smfiDesc smfiDesc_str;
</programlisting>
<para>
Holds information for the milter. <link linkend="smfiDesc-str"><literal>smfiDesc_str</literal></link> is
used by <link linkend="smfi-register"><function>smfi_register()</function></link>.
</para></refsect2>
<refsect2 id="smfiDesc-ptr" role="typedef">
<title>smfiDesc_ptr</title>
<indexterm zone="smfiDesc-ptr"><primary>smfiDesc_ptr</primary></indexterm>
<programlisting>typedef struct smfiDesc&#160;*smfiDesc_ptr;
</programlisting>
<para>
The pointer type of <link linkend="smfiDesc-str"><literal>smfiDesc_str</literal></link>.
</para></refsect2>
<refsect2 id="sfsistat" role="typedef">
<title>sfsistat</title>
<indexterm zone="sfsistat"><primary>sfsistat</primary></indexterm>
<programlisting>typedef int sfsistat;
</programlisting>
<para>
Indicates response status returned by callback.
</para>
<para>Available response status is one of the followings:</para>

<itemizedlist>
  <listitem>
  <para>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link>
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIS-SKIP:CAPS"><literal>SMFIS_SKIP</literal></link>
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIS-ALL-OPTS:CAPS"><literal>SMFIS_ALL_OPTS</literal></link>
</para>
</listitem>
</itemizedlist></refsect2>
<refsect2 id="bool" role="macro">
<title>bool</title>
<indexterm zone="bool"><primary>bool</primary></indexterm>
<programlisting>#      define bool int
</programlisting>
<para>
The boolean type.
</para></refsect2>
<refsect2 id="true" role="macro">
<title>true</title>
<indexterm zone="true"><primary>true</primary></indexterm>
<programlisting>#      define true 1
</programlisting>
<para>
The true value.
</para></refsect2>
<refsect2 id="false" role="macro">
<title>false</title>
<indexterm zone="false"><primary>false</primary></indexterm>
<programlisting>#      define false 0
</programlisting>
<para>
The false value.
</para></refsect2>
<refsect2 id="xxfi-connect" role="function">
<title>xxfi_connect ()</title>
<indexterm zone="xxfi-connect"><primary>xxfi_connect</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_connect)                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *host_name</parameter>,
                                                         <parameter><link linkend="SOCK-ADDR:CAPS"><type>_SOCK_ADDR</type></link> *address</parameter>);</programlisting>
<para>
This callback is called at the start of each milter
session.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current connection.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current connection.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current connection without further more processing.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current connection with a temporary failure. (i.e. 4xx status code in SMTP)</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</term>
  <listitem>
  <para>Doesn't send a reply back to MTA.</para>
  <para>
  The milter must set <link linkend="SMFIP-NR-CONN:CAPS"><literal>SMFIP_NR_CONN</literal></link> flag to <link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_connect">xxfi_connect
</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>host_name</parameter>&#160;:</term>
<listitem><simpara>the host name of the SMTP client.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>address</parameter>&#160;:</term>
<listitem><simpara>the address of the SMTP client.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-helo" role="function">
<title>xxfi_helo ()</title>
<indexterm zone="xxfi-helo"><primary>xxfi_helo</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_helo)                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *fqdn</parameter>);</programlisting>
<para>
This callback is called on SMTP's "HELO"/"EHLO"
command.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current connection.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current connection.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current connection without further more processing.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current connection with a temporary failure. (i.e. 4xx status code in SMTP)</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</term>
  <listitem>
  <para>Doesn't send a reply back to MTA.</para>
  <para>
  The milter must set <link linkend="SMFIP-NR-HELO:CAPS"><literal>SMFIP_NR_HELO</literal></link> flag to <link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_helo">
xxfi_helo</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fqdn</parameter>&#160;:</term>
<listitem><simpara>the FQDN in SMTP's "HELO"/"EHLO" command.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-envfrom" role="function">
<title>xxfi_envfrom ()</title>
<indexterm zone="xxfi-envfrom"><primary>xxfi_envfrom</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_envfrom)                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **arguments</parameter>);</programlisting>
<para>
This callback is called on SMTP's "MAIL FROM" command.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current envelope from address and message. A new envelope from may be specified.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link>
</term>
  <listitem>
  <para>Accepts the current message and discards it silently.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current message without further more processing.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current envelope from address and message with temporary failure. (i.e. 4xx status code in SMTP) A new envelope from address may be specified.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</term>
  <listitem>
  <para>Doesn't send a reply back to MTA.</para>
  <para>
  The milter must set <link linkend="SMFIP-NR-MAIL:CAPS"><literal>SMFIP_NR_MAIL</literal></link> flag to <link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_envfrom">
xxfi_envfrom</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arguments</parameter>&#160;:</term>
<listitem><simpara>the SMTP's "MAIL FROM" command
arguments. The first element is sender
address. <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-envrcpt" role="function">
<title>xxfi_envrcpt ()</title>
<indexterm zone="xxfi-envrcpt"><primary>xxfi_envrcpt</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_envrcpt)                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **arguments</parameter>);</programlisting>
<para>
This callback is called on SMTP's "RCPT TO" command.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current envelope recipient address. Processing the current messages is continued.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link>
</term>
  <listitem>
  <para>Accepts the current message and discards it silently.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current envelope recipient.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current envelope recipient address with temporary failure. (i.e. 4xx status code in SMTP) Processing the current message is continued.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</term>
  <listitem>
  <para>Doesn't send a reply back to MTA.</para>
  <para>
  The milter must set <link linkend="SMFIP-NR-RCPT:CAPS"><literal>SMFIP_NR_RCPT</literal></link> flag to <link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_envrcpt">
xxfi_envrcpt</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arguments</parameter>&#160;:</term>
<listitem><simpara>the SMTP's "RCPT TO" command
arguments. The first element is recipient
address. <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-header" role="function">
<title>xxfi_header ()</title>
<indexterm zone="xxfi-header"><primary>xxfi_header</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_header)                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *value</parameter>);</programlisting>
<para>
This callback is called on each header. If
<link linkend="SMFIP-HDR-LEADSPC:CAPS"><literal>SMFIP_HDR_LEADSPC</literal></link> flag is set to
<link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags, <parameter>value</parameter> have spaces after
header name and value separator ":".
</para>
<para>
Example:
</para>
<para>
<informalexample><programlisting>
From: from &lt;from@example.com&gt;
To: recipient &lt;recipient@example.com&gt;
Subject:a subject
</programlisting></informalexample>
</para>
<para>
With <link linkend="SMFIP-HDR-LEADSPC:CAPS"><literal>SMFIP_HDR_LEADSPC</literal></link>:
</para>
<para>
<informalexample><programlisting>
"From", " from &lt;from@example.com&gt;"
"To", " recipient &lt;recipient@example.com&gt;"
"Subject", "a subject"
</programlisting></informalexample>
</para>
<para>
Without <link linkend="SMFIP-HDR-LEADSPC:CAPS"><literal>SMFIP_HDR_LEADSPC</literal></link>:
</para>
<para>
<informalexample><programlisting>
"From", "from &lt;from@example.com&gt;"
"To", "recipient &lt;recipient@example.com&gt;"
"Subject", "a subject"
</programlisting></informalexample>
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link>
</term>
  <listitem>
  <para>Accepts the current message and discards it silently.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current message without further more processing.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current message with temporary failure. (i.e. 4xx status code in SMTP)</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</term>
  <listitem>
  <para>Doesn't send a reply back to MTA.</para>
  <para>
  The milter must set <link linkend="SMFIP-NR-HDR:CAPS"><literal>SMFIP_NR_HDR</literal></link> flag to <link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_header">
xxfi_header</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the header name.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>the header value. <parameter>value</parameter> may include folded
white space.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-eoh" role="function">
<title>xxfi_eoh ()</title>
<indexterm zone="xxfi-eoh"><primary>xxfi_eoh</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_eoh)                         (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);</programlisting>
<para>
This callback is called on all headers are processed.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link>
</term>
  <listitem>
  <para>Accepts the current message and discards it silently.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current message without further more processing.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current message with temporary failure. (i.e. 4xx status code in SMTP)</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</term>
  <listitem>
  <para>Doesn't send a reply back to MTA.</para>
  <para>
  The milter must set <link linkend="SMFIP-NR-EOH:CAPS"><literal>SMFIP_NR_EOH</literal></link> flag to <link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_eof">
xxfi_eof</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-body" role="function">
<title>xxfi_body ()</title>
<indexterm zone="xxfi-body"><primary>xxfi_body</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_body)                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>);</programlisting>
<para>
This callback is called on body data is received. This
callback is called zero or more times between
<link linkend="xxfi-eoh"><function>xxfi_eoh()</function></link> and <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link>
</term>
  <listitem>
  <para>Accepts the current message and discards it silently.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current message without further more processing.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current message with temporary failure. (i.e. 4xx status code in SMTP)</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-SKIP:CAPS"><literal>SMFIS_SKIP</literal></link>
</term>
  <listitem>
  <para>
  Skips further body processing. <link linkend="xxfi-eom"><function>xxfi_eom()</function></link> is called.
</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</term>
  <listitem>
  <para>Doesn't send a reply back to MTA.</para>
  <para>
  The milter must set <link linkend="SMFIP-NR-BODY:CAPS"><literal>SMFIP_NR_BODY</literal></link> flag to <link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_body">
xxfi_body</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the body chunk.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&#160;:</term>
<listitem><simpara>the size of <parameter>data</parameter>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-eom" role="function">
<title>xxfi_eom ()</title>
<indexterm zone="xxfi-eom"><primary>xxfi_eom</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_eom)                         (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);</programlisting>
<para>
This callback is called after all <link linkend="xxfi-body"><function>xxfi_body()</function></link> are
called. All message modifications can be done only in
this callback. The modifications can be done with
<link linkend="smfi-addheader"><function>smfi_addheader()</function></link>, <link linkend="smfi-chgfrom"><function>smfi_chgfrom()</function></link> and so on.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link>
</term>
  <listitem>
  <para>Accepts the current message and discards it silently.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current message without further more processing.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current message with temporary failure. (i.e. 4xx status code in SMTP)</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_eom">
xxfi_eom</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-abort" role="function">
<title>xxfi_abort ()</title>
<indexterm zone="xxfi-abort"><primary>xxfi_abort</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_abort)                       (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);</programlisting>
<para>
This callback may be called at any time between
<link linkend="xxfi-envfrom"><function>xxfi_envfrom()</function></link> and <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. This callback is only
called if the milter causes an internal error and the
message processing isn't completed. For example, if
the milter has already returned <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>,
<link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>, <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link> and <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>,
this callback will not be called.
</para>
<para>
If the milter has any resources allocated for the
message between <link linkend="xxfi-envfrom"><function>xxfi_envfrom()</function></link> and <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>, should
be freed in this callback. But any resources
allocated for the connection should not be freed in
this callback. It should be freed in <link linkend="xxfi-close"><function>xxfi_close()</function></link>.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link>
</term>
  <listitem>
  <para>Accepts the current message and discards it silently.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current message without further more processing.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current message with temporary failure. (i.e. 4xx status code in SMTP)</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_abort">
xxfi_abort</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-close" role="function">
<title>xxfi_close ()</title>
<indexterm zone="xxfi-close"><primary>xxfi_close</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_close)                       (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);</programlisting>
<para>
This callback is called at the end of each miler
session. If the milter has any resources allocated
for the session free, should be freed in this
callback.
</para>
<para>
All response statuses are ignored. Use <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>.
</para>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_close">
xxfi_close</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-unknown" role="function">
<title>xxfi_unknown ()</title>
<indexterm zone="xxfi-unknown"><primary>xxfi_unknown</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_unknown)                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *command</parameter>);</programlisting>
<para>
This callback is called on unknown or unimplemented
SMTP command is sent.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current message with temporary failure. (i.e. 4xx status code in SMTP)</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</term>
  <listitem>
  <para>Doesn't send a reply back to MTA.</para>
  <para>
  The milter must set <link linkend="SMFIP-NR-UNKN:CAPS"><literal>SMFIP_NR_UNKN</literal></link> flag to <link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
Note that the unknown or unimplemented SMTP command
will always be rejected by MTA.
</para>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_unknown">
xxfi_unknown</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>command</parameter>&#160;:</term>
<listitem><simpara>the unknown SMTP command.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-data" role="function">
<title>xxfi_data ()</title>
<indexterm zone="xxfi-data"><primary>xxfi_data</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_data)                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);</programlisting>
<para>
This callback is called on SMTP's "DATA" command.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>Continues processing the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current message.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-DISCARD:CAPS"><literal>SMFIS_DISCARD</literal></link>
</term>
  <listitem>
  <para>Accepts the current message and discards it silently.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-ACCEPT:CAPS"><literal>SMFIS_ACCEPT</literal></link>
</term>
  <listitem>
  <para>Accepts the current envelope recipient.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>
</term>
  <listitem>
  <para>Rejects the current message with temporary failure. (i.e. 4xx status code in SMTP)</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-NOREPLY:CAPS"><literal>SMFIS_NOREPLY</literal></link>
</term>
  <listitem>
  <para>Doesn't send a reply back to MTA.</para>
  <para>
  The milter must set <link linkend="SMFIP-NR-DATA:CAPS"><literal>SMFIP_NR_DATA</literal></link> flag to <link linkend="smfiDesc"><literal>smfiDesc</literal></link>::xxfi_flags.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_data">
xxfi_data</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xxfi-negotiate" role="function">
<title>xxfi_negotiate ()</title>
<indexterm zone="xxfi-negotiate"><primary>xxfi_negotiate</primary></indexterm>
<programlisting><link linkend="sfsistat"><returnvalue>sfsistat</returnvalue></link>            (*xxfi_negotiate)                   (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><type>unsigned long </type> actions</parameter>,
                                                         <parameter><type>unsigned long </type> steps</parameter>,
                                                         <parameter><type>unsigned long </type> unused0</parameter>,
                                                         <parameter><type>unsigned long </type> unused1</parameter>,
                                                         <parameter>unsigned <link linkend="long"><type>long</type></link> *actions_output</parameter>,
                                                         <parameter>unsigned <link linkend="long"><type>long</type></link> *steps_output</parameter>,
                                                         <parameter>unsigned <link linkend="long"><type>long</type></link> *unused0_output</parameter>,
                                                         <parameter>unsigned <link linkend="long"><type>long</type></link> *unused1_output</parameter>);</programlisting>
<para>
This callback is called on negotiate request from
MTA.  If you want to change received <parameter>actions</parameter> and
<parameter>steps</parameter> from MTA, you set <parameter>actions_output</parameter> and
<parameter>steps_output</parameter> and returns <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>. If you
don't need to change <parameter>actions</parameter> and <parameter>steps</parameter>, you can
just return <link linkend="SMFIS-ALL-OPTS:CAPS"><literal>SMFIS_ALL_OPTS</literal></link>.
</para>
<para>
All available response statuses are the followings:
</para>
<variablelist>
  <varlistentry>
  <term id='xml.&lt;link'>
  <link linkend="SMFIS-ALL-OPTS:CAPS"><literal>SMFIS_ALL_OPTS</literal></link>
</term>
  <listitem>
  <para>Enables all available actions and steps.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>
</term>
  <listitem>
  <para>Rejects the current session.</para>
</listitem>
</varlistentry>
  <varlistentry>
  <term>
  <link linkend="SMFIS-CONTINUE:CAPS"><literal>SMFIS_CONTINUE</literal></link>
</term>
  <listitem>
  <para>
  Continues processing the current session with <parameter>actions_output</parameter> and <parameter>steps_output</parameter>.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/xxfi_negotiate">
xxfi_negotiate</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actions</parameter>&#160;:</term>
<listitem><simpara>the actions received from MTA.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>steps</parameter>&#160;:</term>
<listitem><simpara>the milter protocol steps offered from MTA.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unused0</parameter>&#160;:</term>
<listitem><simpara>unused.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unused1</parameter>&#160;:</term>
<listitem><simpara>unused.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actions_output</parameter>&#160;:</term>
<listitem><simpara>the actions requested to MTA.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>steps_output</parameter>&#160;:</term>
<listitem><simpara>the milter protocol steps requested to MTA.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unused0_output</parameter>&#160;:</term>
<listitem><simpara>unused.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unused1_output</parameter>&#160;:</term>
<listitem><simpara>unused.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>response status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-opensocket" role="function">
<title>smfi_opensocket ()</title>
<indexterm zone="smfi-opensocket"><primary>smfi_opensocket</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_opensocket                     (<parameter><link linkend="bool"><type>bool</type></link> remove_socket</parameter>);</programlisting>
<para>
Creates the socket that is used to connect from MTA.
</para>
<para>
Normally, <link linkend="smfi-opensocket"><function>smfi_opensocket()</function></link> isn't needed to call
explicitly. The socket is created in <link linkend="smfi-main"><function>smfi_main()</function></link>
implicitly.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <link linkend="smfi-register"><function>smfi_register()</function></link> hasn't called successfully.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="smfi-setconn"><function>smfi_setconn()</function></link> hasn't called successfully.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="smfi-opensocket"><function>smfi_opensocket()</function></link> fails to remove existing UNIX domain socket if connection spec is for UNIX domain socket and <parameter>remove_socket</parameter> is true.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="smfi-opensocket"><function>smfi_opensocket()</function></link> fails to create the new socket.
</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_opensocket">
smfi_opensocket</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>remove_socket</parameter>&#160;:</term>
<listitem><simpara>Whether or not trying to remove existing
UNIX domain socket before creating a new
socket.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-register" role="function">
<title>smfi_register ()</title>
<indexterm zone="smfi-register"><primary>smfi_register</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_register                       (<parameter><type>struct smfiDesc</type> description</parameter>);</programlisting>
<para>
Registers the milter implementation as callbacks.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>incompatible xxfi_version.</para>
</listitem>
  <listitem>
  <para>illegal xxfi_flags value.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>description</parameter>&#160;:</term>
<listitem><simpara>The milter description.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-main" role="function">
<title>smfi_main ()</title>
<indexterm zone="smfi-main"><primary>smfi_main</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_main                           (<parameter><type>void</type></parameter>);</programlisting>
<para>
Enters event loop. The milter should be initialized
with <link linkend="smfi-register"><function>smfi_register()</function></link>, <link linkend="smfi-setconn"><function>smfi_setconn()</function></link> and so on before
<link linkend="smfi-main"><function>smfi_main()</function></link> is called.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>failed to create the socket.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_main">
smfi_main</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-setbacklog" role="function">
<title>smfi_setbacklog ()</title>
<indexterm zone="smfi-setbacklog"><primary>smfi_setbacklog</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_setbacklog                     (<parameter><link linkend="int"><type>int</type></link> backlog</parameter>);</programlisting>
<para>
Sets the milters' backlog value that is used for
listen(2).
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>backlog</parameter> &amp;lt;= 0.
</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_setbacklog">
smfi_setbacklog</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>backlog</parameter>&#160;:</term>
<listitem><simpara>The maximum length of the pending connections queue.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-setdbg" role="function">
<title>smfi_setdbg ()</title>
<indexterm zone="smfi-setdbg"><primary>smfi_setdbg</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_setdbg                         (<parameter><link linkend="int"><type>int</type></link> level</parameter>);</programlisting>
<para>
Sets the log level. If <parameter>level</parameter> is 0, turns off any log
message. The greater value is specified, more log
messages are output.
</para>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_setdbg">
smfi_setdbg</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara>The log level.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>always <link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-settimeout" role="function">
<title>smfi_settimeout ()</title>
<indexterm zone="smfi-settimeout"><primary>smfi_settimeout</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_settimeout                     (<parameter><link linkend="int"><type>int</type></link> timeout</parameter>);</programlisting>
<para>
Sets the I/O timeout value in seconds. The default value
is 7210 seconds. <parameter>timeout</parameter> == 0 means no wait, not "wait
forever".
</para>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_settimeout">
smfi_settimeout</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>timeout</parameter>&#160;:</term>
<listitem><simpara>The timeout value in seconds.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>always <link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-setconn" role="function">
<title>smfi_setconn ()</title>
<indexterm zone="smfi-setconn"><primary>smfi_setconn</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_setconn                        (<parameter><link linkend="char"><type>char</type></link> *connection_spec</parameter>);</programlisting>
<para>
Sets the connection spec.
</para>
<para>
  <parameter>connection_spec</parameter> format is one of them:
</para>

<itemizedlist>
  <listitem>
  <para>&quot;unix:/PATH/TO/SOCKET&quot;: UNIX domain socket.</para>
</listitem>
  <listitem>
  <para>&quot;inet:PORT&quot;, &quot;inet:PORT&commat;HOST_NAME&quot; or &quot;inet:PORT&commat;IP_ADDRESS&quot;: IPv4.</para>
</listitem>
  <listitem>
  <para>&quot;inet6:PORT&quot;, &quot;inet6:PORT&commat;HOST_NAME&quot; or &quot;inet6:PORT&commat;IP_ADDRESS&quot;: IPv6.</para>
</listitem>
</itemizedlist>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>invalid format.</para>
</listitem>
  <listitem>
  <para>
  <parameter>connection_spec</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_setconn">
smfi_setconn</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>connection_spec</parameter>&#160;:</term>
<listitem><simpara>The connection spec for communicating MTA.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-stop" role="function">
<title>smfi_stop ()</title>
<indexterm zone="smfi-stop"><primary>smfi_stop</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_stop                           (<parameter><type>void</type></parameter>);</programlisting>
<para>
Stops the milter. No more connections are accepted but
processing connections are continued until they are
finished.
</para>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_stop">
smfi_stop</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>always <link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-version" role="function">
<title>smfi_version ()</title>
<indexterm zone="smfi-version"><primary>smfi_version</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_version                        (<parameter>unsigned <link linkend="int"><type>int</type></link> *major</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *minor</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *patch_level</parameter>);</programlisting>
<para>
Gets the libmilter version. The version is for using
libmilter not built libmilter.
</para>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_version">
smfi_version</ulink>
on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>major</parameter>&#160;:</term>
<listitem><simpara>return location for major version.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>minor</parameter>&#160;:</term>
<listitem><simpara>return location for minor version.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>patch_level</parameter>&#160;:</term>
<listitem><simpara>return location for patch level.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>always <link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SMFIF-ADDHDRS:CAPS" role="macro">
<title>SMFIF_ADDHDRS</title>
<indexterm zone="SMFIF-ADDHDRS:CAPS"><primary>SMFIF_ADDHDRS</primary></indexterm>
<programlisting>#define SMFIF_ADDHDRS     0x00000001L
</programlisting>
<para>
The milter may call <link linkend="smfi-addheader"><function>smfi_addheader()</function></link>.
</para>
<para>
See also <link linkend="smfiDesc"><literal>smfiDesc</literal></link>, <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link> and <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register on milter.org</ulink>.
</para></refsect2>
<refsect2 id="SMFIF-CHGBODY:CAPS" role="macro">
<title>SMFIF_CHGBODY</title>
<indexterm zone="SMFIF-CHGBODY:CAPS"><primary>SMFIF_CHGBODY</primary></indexterm>
<programlisting>#define SMFIF_CHGBODY     0x00000002L
</programlisting>
<para>
The milter may call <link linkend="smfi-chgbody"><function>smfi_chgbody()</function></link>.
</para>
<para>
See also <link linkend="smfiDesc"><literal>smfiDesc</literal></link>, <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link> and <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register on milter.org</ulink>.
</para></refsect2>
<refsect2 id="SMFIF-MODBODY:CAPS" role="macro">
<title>SMFIF_MODBODY</title>
<indexterm zone="SMFIF-MODBODY:CAPS"><primary>SMFIF_MODBODY</primary></indexterm>
<programlisting>#define SMFIF_MODBODY     SMFIF_CHGBODY
</programlisting>
<para>
Same as <link linkend="SMFIF-CHGBODY:CAPS"><literal>SMFIF_CHGBODY</literal></link>.
</para></refsect2>
<refsect2 id="SMFIF-ADDRCPT:CAPS" role="macro">
<title>SMFIF_ADDRCPT</title>
<indexterm zone="SMFIF-ADDRCPT:CAPS"><primary>SMFIF_ADDRCPT</primary></indexterm>
<programlisting>#define SMFIF_ADDRCPT     0x00000004L
</programlisting>
<para>
The milter may call <link linkend="smfi-addrcpt"><function>smfi_addrcpt()</function></link>.
</para>
<para>
See also <link linkend="smfiDesc"><literal>smfiDesc</literal></link>, <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link> and <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register on milter.org</ulink>.
</para></refsect2>
<refsect2 id="SMFIF-DELRCPT:CAPS" role="macro">
<title>SMFIF_DELRCPT</title>
<indexterm zone="SMFIF-DELRCPT:CAPS"><primary>SMFIF_DELRCPT</primary></indexterm>
<programlisting>#define SMFIF_DELRCPT     0x00000008L
</programlisting>
<para>
The milter may call <link linkend="smfi-delrcpt"><function>smfi_delrcpt()</function></link>.
</para>
<para>
See also <link linkend="smfiDesc"><literal>smfiDesc</literal></link>, <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link> and <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register on milter.org</ulink>.
</para></refsect2>
<refsect2 id="SMFIF-CHGHDRS:CAPS" role="macro">
<title>SMFIF_CHGHDRS</title>
<indexterm zone="SMFIF-CHGHDRS:CAPS"><primary>SMFIF_CHGHDRS</primary></indexterm>
<programlisting>#define SMFIF_CHGHDRS     0x00000010L
</programlisting>
<para>
The milter may call <link linkend="smfi-chgheader"><function>smfi_chgheader()</function></link>.
</para>
<para>
See also <link linkend="smfiDesc"><literal>smfiDesc</literal></link>, <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link> and <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register on milter.org</ulink>.
</para></refsect2>
<refsect2 id="SMFIF-QUARANTINE:CAPS" role="macro">
<title>SMFIF_QUARANTINE</title>
<indexterm zone="SMFIF-QUARANTINE:CAPS"><primary>SMFIF_QUARANTINE</primary></indexterm>
<programlisting>#define SMFIF_QUARANTINE  0x00000020L
</programlisting>
<para>
The milter may call <link linkend="smfi-quarantine"><function>smfi_quarantine()</function></link>.
</para>
<para>
See also <link linkend="smfiDesc"><literal>smfiDesc</literal></link>, <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link> and <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register on milter.org</ulink>.
</para></refsect2>
<refsect2 id="SMFIF-CHGFROM:CAPS" role="macro">
<title>SMFIF_CHGFROM</title>
<indexterm zone="SMFIF-CHGFROM:CAPS"><primary>SMFIF_CHGFROM</primary></indexterm>
<programlisting>#define SMFIF_CHGFROM     0x00000040L
</programlisting>
<para>
The milter may call <link linkend="smfi-chgfrom"><function>smfi_chgfrom()</function></link>.
</para>
<para>
See also <link linkend="smfiDesc"><literal>smfiDesc</literal></link>, <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link> and <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register on milter.org</ulink>.
</para></refsect2>
<refsect2 id="SMFIF-ADDRCPT-PAR:CAPS" role="macro">
<title>SMFIF_ADDRCPT_PAR</title>
<indexterm zone="SMFIF-ADDRCPT-PAR:CAPS"><primary>SMFIF_ADDRCPT_PAR</primary></indexterm>
<programlisting>#define SMFIF_ADDRCPT_PAR 0x00000080L
</programlisting>
<para>
The milter may call <link linkend="smfi-addrcpt-par"><function>smfi_addrcpt_par()</function></link>.
</para>
<para>
See also <link linkend="smfiDesc"><literal>smfiDesc</literal></link>, <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link> and <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register on milter.org</ulink>.
</para></refsect2>
<refsect2 id="SMFIF-SETSYMLIST:CAPS" role="macro">
<title>SMFIF_SETSYMLIST</title>
<indexterm zone="SMFIF-SETSYMLIST:CAPS"><primary>SMFIF_SETSYMLIST</primary></indexterm>
<programlisting>#define SMFIF_SETSYMLIST  0x00000100L
</programlisting>
<para>
The milter may call <link linkend="smfi-setsymlist"><function>smfi_setsymlist()</function></link>.
</para>
<para>
See also <link linkend="smfiDesc"><literal>smfiDesc</literal></link>, <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link> and <ulink
url="https://www.milter.org/developers/api/smfi_register">
smfi_register on milter.org</ulink>.
</para></refsect2>
<refsect2 id="SMFIS-CONTINUE:CAPS" role="macro">
<title>SMFIS_CONTINUE</title>
<indexterm zone="SMFIS-CONTINUE:CAPS"><primary>SMFIS_CONTINUE</primary></indexterm>
<programlisting>#define SMFIS_CONTINUE    0
</programlisting>
<para>
Continues the current process.
</para>
<para>
See each callback (<link linkend="xxfi-connect"><function>xxfi_connect()</function></link>, <link linkend="xxfi-helo"><function>xxfi_helo()</function></link> and so
on) and <ulink
url="https://www.milter.org/developers/api/">
callback return status description</ulink> on milter.org.
</para></refsect2>
<refsect2 id="SMFIS-REJECT:CAPS" role="macro">
<title>SMFIS_REJECT</title>
<indexterm zone="SMFIS-REJECT:CAPS"><primary>SMFIS_REJECT</primary></indexterm>
<programlisting>#define SMFIS_REJECT      1
</programlisting>
<para>
Rejects the current processing target.
</para>
<para>
See each callback (<link linkend="xxfi-connect"><function>xxfi_connect()</function></link>, <link linkend="xxfi-helo"><function>xxfi_helo()</function></link> and so
on) and <ulink
url="https://www.milter.org/developers/api/">
callback return status description</ulink> on milter.org.
</para></refsect2>
<refsect2 id="SMFIS-DISCARD:CAPS" role="macro">
<title>SMFIS_DISCARD</title>
<indexterm zone="SMFIS-DISCARD:CAPS"><primary>SMFIS_DISCARD</primary></indexterm>
<programlisting>#define SMFIS_DISCARD     2
</programlisting>
<para>
Accepts the current processing target and discards it
silently.
</para>
<para>
See each callback (<link linkend="xxfi-envfrom"><function>xxfi_envfrom()</function></link>, <link linkend="xxfi-envrcpt"><function>xxfi_envrcpt()</function></link> and so
on) and <ulink
url="https://www.milter.org/developers/api/">
callback return status description</ulink> on milter.org.
</para></refsect2>
<refsect2 id="SMFIS-ACCEPT:CAPS" role="macro">
<title>SMFIS_ACCEPT</title>
<indexterm zone="SMFIS-ACCEPT:CAPS"><primary>SMFIS_ACCEPT</primary></indexterm>
<programlisting>#define SMFIS_ACCEPT      3
</programlisting>
<para>
Accepts the current processing target.
</para>
<para>
See each callback (<link linkend="xxfi-connect"><function>xxfi_connect()</function></link>, <link linkend="xxfi-helo"><function>xxfi_helo()</function></link> and so
on) and <ulink
url="https://www.milter.org/developers/api/">
callback return status description</ulink> on milter.org.
</para></refsect2>
<refsect2 id="SMFIS-TEMPFAIL:CAPS" role="macro">
<title>SMFIS_TEMPFAIL</title>
<indexterm zone="SMFIS-TEMPFAIL:CAPS"><primary>SMFIS_TEMPFAIL</primary></indexterm>
<programlisting>#define SMFIS_TEMPFAIL    4
</programlisting>
<para>
Replies a temporary failure status for the current
processing target.
</para>
<para>
See each callback (<link linkend="xxfi-connect"><function>xxfi_connect()</function></link>, <link linkend="xxfi-helo"><function>xxfi_helo()</function></link> and so
on) and <ulink
url="https://www.milter.org/developers/api/">
callback return status description</ulink> on milter.org.
</para></refsect2>
<refsect2 id="SMFIS-NOREPLY:CAPS" role="macro">
<title>SMFIS_NOREPLY</title>
<indexterm zone="SMFIS-NOREPLY:CAPS"><primary>SMFIS_NOREPLY</primary></indexterm>
<programlisting>#define SMFIS_NOREPLY     7
</programlisting>
<para>
Doesn't reply to the MTA.
</para>
<para>
See each callback (<link linkend="xxfi-connect"><function>xxfi_connect()</function></link>, <link linkend="xxfi-helo"><function>xxfi_helo()</function></link> and so
on) and <ulink
url="https://www.milter.org/developers/api/">
callback return status description</ulink> on milter.org.
</para></refsect2>
<refsect2 id="SMFIS-SKIP:CAPS" role="macro">
<title>SMFIS_SKIP</title>
<indexterm zone="SMFIS-SKIP:CAPS"><primary>SMFIS_SKIP</primary></indexterm>
<programlisting>#define SMFIS_SKIP        8
</programlisting>
<para>
Skips the rest body chunks. This can be used only in
<link linkend="xxfi-body"><function>xxfi_body()</function></link>.
</para>
<para>
See also <ulink
url="https://www.milter.org/developers/api/">
callback return status description</ulink> on milter.org.
</para></refsect2>
<refsect2 id="SMFIS-ALL-OPTS:CAPS" role="macro">
<title>SMFIS_ALL_OPTS</title>
<indexterm zone="SMFIS-ALL-OPTS:CAPS"><primary>SMFIS_ALL_OPTS</primary></indexterm>
<programlisting>#define SMFIS_ALL_OPTS    10
</programlisting>
<para>
Uses the all negotiate options received from the
MTA. This can be used only in <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIM-CONNECT:CAPS" role="macro">
<title>SMFIM_CONNECT</title>
<indexterm zone="SMFIM-CONNECT:CAPS"><primary>SMFIM_CONNECT</primary></indexterm>
<programlisting>#define SMFIM_CONNECT	  0
</programlisting>
<para>
Indicates the protocol stage for <link linkend="xxfi-connect"><function>xxfi_connect()</function></link>.
</para>
<para>
See <link linkend="smfi-setsymlist"><function>smfi_setsymlist()</function></link>.
</para></refsect2>
<refsect2 id="SMFIM-HELO:CAPS" role="macro">
<title>SMFIM_HELO</title>
<indexterm zone="SMFIM-HELO:CAPS"><primary>SMFIM_HELO</primary></indexterm>
<programlisting>#define SMFIM_HELO	  1
</programlisting>
<para>
Indicates the protocol stage for <link linkend="xxfi-helo"><function>xxfi_helo()</function></link>.
</para>
<para>
See <link linkend="smfi-setsymlist"><function>smfi_setsymlist()</function></link>.
</para></refsect2>
<refsect2 id="SMFIM-ENVFROM:CAPS" role="macro">
<title>SMFIM_ENVFROM</title>
<indexterm zone="SMFIM-ENVFROM:CAPS"><primary>SMFIM_ENVFROM</primary></indexterm>
<programlisting>#define SMFIM_ENVFROM	  2
</programlisting>
<para>
Indicates the protocol stage for <link linkend="xxfi-envfrom"><function>xxfi_envfrom()</function></link>.
</para>
<para>
See <link linkend="smfi-setsymlist"><function>smfi_setsymlist()</function></link>.
</para></refsect2>
<refsect2 id="SMFIM-ENVRCPT:CAPS" role="macro">
<title>SMFIM_ENVRCPT</title>
<indexterm zone="SMFIM-ENVRCPT:CAPS"><primary>SMFIM_ENVRCPT</primary></indexterm>
<programlisting>#define SMFIM_ENVRCPT	  3
</programlisting>
<para>
Indicates the protocol stage for <link linkend="xxfi-envrcpt"><function>xxfi_envrcpt()</function></link>.
</para>
<para>
See <link linkend="smfi-setsymlist"><function>smfi_setsymlist()</function></link>.
</para></refsect2>
<refsect2 id="SMFIM-DATA:CAPS" role="macro">
<title>SMFIM_DATA</title>
<indexterm zone="SMFIM-DATA:CAPS"><primary>SMFIM_DATA</primary></indexterm>
<programlisting>#define SMFIM_DATA	  4
</programlisting>
<para>
Indicates the protocol stage for <link linkend="xxfi-data"><function>xxfi_data()</function></link>.
</para>
<para>
See <link linkend="smfi-setsymlist"><function>smfi_setsymlist()</function></link>.
</para></refsect2>
<refsect2 id="SMFIM-EOM:CAPS" role="macro">
<title>SMFIM_EOM</title>
<indexterm zone="SMFIM-EOM:CAPS"><primary>SMFIM_EOM</primary></indexterm>
<programlisting>#define SMFIM_EOM	  5
</programlisting>
<para>
Indicates the protocol stage for <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>
See <link linkend="smfi-setsymlist"><function>smfi_setsymlist()</function></link>.
</para></refsect2>
<refsect2 id="SMFIM-EOH:CAPS" role="macro">
<title>SMFIM_EOH</title>
<indexterm zone="SMFIM-EOH:CAPS"><primary>SMFIM_EOH</primary></indexterm>
<programlisting>#define SMFIM_EOH	  6
</programlisting>
<para>
Indicates the protocol stage for <link linkend="xxfi-eoh"><function>xxfi_eoh()</function></link>.
</para>
<para>
See <link linkend="smfi-setsymlist"><function>smfi_setsymlist()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NOCONNECT:CAPS" role="macro">
<title>SMFIP_NOCONNECT</title>
<indexterm zone="SMFIP-NOCONNECT:CAPS"><primary>SMFIP_NOCONNECT</primary></indexterm>
<programlisting>#define SMFIP_NOCONNECT       0x00000001L
</programlisting>
<para>
Indicates that the MTA should not send information for
<link linkend="xxfi-connect"><function>xxfi_connect()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NOHELO:CAPS" role="macro">
<title>SMFIP_NOHELO</title>
<indexterm zone="SMFIP-NOHELO:CAPS"><primary>SMFIP_NOHELO</primary></indexterm>
<programlisting>#define SMFIP_NOHELO          0x00000002L
</programlisting>
<para>
Indicates that the MTA should not send information for
<link linkend="xxfi-helo"><function>xxfi_helo()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NOMAIL:CAPS" role="macro">
<title>SMFIP_NOMAIL</title>
<indexterm zone="SMFIP-NOMAIL:CAPS"><primary>SMFIP_NOMAIL</primary></indexterm>
<programlisting>#define SMFIP_NOMAIL          0x00000004L
</programlisting>
<para>
Indicates that the MTA should not send information for
<link linkend="xxfi-mail"><function>xxfi_mail()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NORCPT:CAPS" role="macro">
<title>SMFIP_NORCPT</title>
<indexterm zone="SMFIP-NORCPT:CAPS"><primary>SMFIP_NORCPT</primary></indexterm>
<programlisting>#define SMFIP_NORCPT          0x00000008L
</programlisting>
<para>
Indicates that the MTA should not send information for
<link linkend="xxfi-rcpt"><function>xxfi_rcpt()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NOBODY:CAPS" role="macro">
<title>SMFIP_NOBODY</title>
<indexterm zone="SMFIP-NOBODY:CAPS"><primary>SMFIP_NOBODY</primary></indexterm>
<programlisting>#define SMFIP_NOBODY          0x00000010L
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SMFIP-NOHDRS:CAPS" role="macro">
<title>SMFIP_NOHDRS</title>
<indexterm zone="SMFIP-NOHDRS:CAPS"><primary>SMFIP_NOHDRS</primary></indexterm>
<programlisting>#define SMFIP_NOHDRS          0x00000020L
</programlisting>
<para>
Indicates that the MTA should not send information for
<link linkend="xxfi-header"><function>xxfi_header()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NOEOH:CAPS" role="macro">
<title>SMFIP_NOEOH</title>
<indexterm zone="SMFIP-NOEOH:CAPS"><primary>SMFIP_NOEOH</primary></indexterm>
<programlisting>#define SMFIP_NOEOH           0x00000040L
</programlisting>
<para>
Indicates that the MTA should not send information for
<link linkend="xxfi-eoh"><function>xxfi_eoh()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NR-HDR:CAPS" role="macro">
<title>SMFIP_NR_HDR</title>
<indexterm zone="SMFIP-NR-HDR:CAPS"><primary>SMFIP_NR_HDR</primary></indexterm>
<programlisting>#define SMFIP_NR_HDR          0x00000080L
</programlisting>
<para>
Indicates that the milter don't reply on <link linkend="xxfi-header"><function>xxfi_header()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NOHREPL:CAPS" role="macro">
<title>SMFIP_NOHREPL</title>
<indexterm zone="SMFIP-NOHREPL:CAPS"><primary>SMFIP_NOHREPL</primary></indexterm>
<programlisting>#define SMFIP_NOHREPL         SMFIP_NR_HDR
</programlisting>
<para>
Same as <link linkend="SMFIP-NR-HDR:CAPS"><literal>SMFIP_NR_HDR</literal></link>.
</para></refsect2>
<refsect2 id="SMFIP-NOUNKNOWN:CAPS" role="macro">
<title>SMFIP_NOUNKNOWN</title>
<indexterm zone="SMFIP-NOUNKNOWN:CAPS"><primary>SMFIP_NOUNKNOWN</primary></indexterm>
<programlisting>#define SMFIP_NOUNKNOWN       0x00000100L
</programlisting>
<para>
Indicates that the MTA should not send information for
<link linkend="xxfi-unknown"><function>xxfi_unknown()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NODATA:CAPS" role="macro">
<title>SMFIP_NODATA</title>
<indexterm zone="SMFIP-NODATA:CAPS"><primary>SMFIP_NODATA</primary></indexterm>
<programlisting>#define SMFIP_NODATA          0x00000200L
</programlisting>
<para>
Indicates that the MTA should not send information for
<link linkend="xxfi-data"><function>xxfi_data()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-SKIP:CAPS" role="macro">
<title>SMFIP_SKIP</title>
<indexterm zone="SMFIP-SKIP:CAPS"><primary>SMFIP_SKIP</primary></indexterm>
<programlisting>#define SMFIP_SKIP            0x00000400L
</programlisting>
<para>
Indicates that the MTA supports <link linkend="SMFIS-SKIP:CAPS"><literal>SMFIS_SKIP</literal></link> in <link linkend="xxfi-body"><function>xxfi_body()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-RCPT-REJ:CAPS" role="macro">
<title>SMFIP_RCPT_REJ</title>
<indexterm zone="SMFIP-RCPT-REJ:CAPS"><primary>SMFIP_RCPT_REJ</primary></indexterm>
<programlisting>#define SMFIP_RCPT_REJ        0x00000800L
</programlisting>
<para>
Indicates that the MTA should send rejected envelope
recipients and <link linkend="xxfi-envrcpt"><function>xxfi_envrcpt()</function></link> is called for them.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NR-CONN:CAPS" role="macro">
<title>SMFIP_NR_CONN</title>
<indexterm zone="SMFIP-NR-CONN:CAPS"><primary>SMFIP_NR_CONN</primary></indexterm>
<programlisting>#define SMFIP_NR_CONN         0x00001000L
</programlisting>
<para>
Indicates that the milter don't reply on <link linkend="xxfi-connect"><function>xxfi_connect()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NR-HELO:CAPS" role="macro">
<title>SMFIP_NR_HELO</title>
<indexterm zone="SMFIP-NR-HELO:CAPS"><primary>SMFIP_NR_HELO</primary></indexterm>
<programlisting>#define SMFIP_NR_HELO         0x00002000L
</programlisting>
<para>
Indicates that the milter don't reply on <link linkend="xxfi-helo"><function>xxfi_helo()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NR-MAIL:CAPS" role="macro">
<title>SMFIP_NR_MAIL</title>
<indexterm zone="SMFIP-NR-MAIL:CAPS"><primary>SMFIP_NR_MAIL</primary></indexterm>
<programlisting>#define SMFIP_NR_MAIL         0x00004000L
</programlisting>
<para>
Indicates that the milter don't reply on <link linkend="xxfi-envfrom"><function>xxfi_envfrom()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NR-RCPT:CAPS" role="macro">
<title>SMFIP_NR_RCPT</title>
<indexterm zone="SMFIP-NR-RCPT:CAPS"><primary>SMFIP_NR_RCPT</primary></indexterm>
<programlisting>#define SMFIP_NR_RCPT         0x00008000L
</programlisting>
<para>
Indicates that the milter don't reply on <link linkend="xxfi-envrcpt"><function>xxfi_envrcpt()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NR-DATA:CAPS" role="macro">
<title>SMFIP_NR_DATA</title>
<indexterm zone="SMFIP-NR-DATA:CAPS"><primary>SMFIP_NR_DATA</primary></indexterm>
<programlisting>#define SMFIP_NR_DATA         0x00010000L
</programlisting>
<para>
Indicates that the milter don't reply on <link linkend="xxfi-data"><function>xxfi_data()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NR-UNKN:CAPS" role="macro">
<title>SMFIP_NR_UNKN</title>
<indexterm zone="SMFIP-NR-UNKN:CAPS"><primary>SMFIP_NR_UNKN</primary></indexterm>
<programlisting>#define SMFIP_NR_UNKN         0x00020000L
</programlisting>
<para>
Indicates that the milter don't reply on <link linkend="xxfi-unknown"><function>xxfi_unknown()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NR-EOH:CAPS" role="macro">
<title>SMFIP_NR_EOH</title>
<indexterm zone="SMFIP-NR-EOH:CAPS"><primary>SMFIP_NR_EOH</primary></indexterm>
<programlisting>#define SMFIP_NR_EOH          0x00040000L
</programlisting>
<para>
Indicates that the milter don't reply on <link linkend="xxfi-eoh"><function>xxfi_eoh()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-NR-BODY:CAPS" role="macro">
<title>SMFIP_NR_BODY</title>
<indexterm zone="SMFIP-NR-BODY:CAPS"><primary>SMFIP_NR_BODY</primary></indexterm>
<programlisting>#define SMFIP_NR_BODY         0x00080000L
</programlisting>
<para>
Indicates that the milter don't reply on <link linkend="xxfi-body"><function>xxfi_body()</function></link>.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="SMFIP-HDR-LEADSPC:CAPS" role="macro">
<title>SMFIP_HDR_LEADSPC</title>
<indexterm zone="SMFIP-HDR-LEADSPC:CAPS"><primary>SMFIP_HDR_LEADSPC</primary></indexterm>
<programlisting>#define SMFIP_HDR_LEADSPC     0x00100000L
</programlisting>
<para>
Indicates that <link linkend="xxfi-header"><function>xxfi_header()</function></link> callback is received a
header value including spaces after ':'. See
<link linkend="xxfi-header"><function>xxfi_header()</function></link> for examples.
</para>
<para>
This flag can be got/set to <parameter>steps_output</parameter> of <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para></refsect2>
<refsect2 id="smfi-getsymval" role="function">
<title>smfi_getsymval ()</title>
<indexterm zone="smfi-getsymval"><primary>smfi_getsymval</primary></indexterm>
<programlisting><link linkend="char"><returnvalue>char</returnvalue></link> *              smfi_getsymval                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
Gets a value of the macro named <parameter>name</parameter> in the current milter
session context. <link linkend="smfi-getsymval"><function>smfi_getsymval()</function></link> can be called in
xxfi_XXX callbacks. (e.g. <link linkend="xxfi-connect"><function>xxfi_connect()</function></link>, <link linkend="xxfi-helo"><function>xxfi_helo()</function></link>,
...)
</para>
<para>
<parameter>name</parameter> should be enclosed in braces ("{" and "}") like
"{if_name}" except <parameter>name</parameter> contains a character like "i".
</para>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_getsymval">
smfi_getsymval</ulink> on milter.org. Sendmail's default
macros are also shown in the page.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the name of a macro.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a value of the macro named <parameter>name</parameter> if it exists,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-setreply" role="function">
<title>smfi_setreply ()</title>
<indexterm zone="smfi-setreply"><primary>smfi_setreply</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_setreply                       (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *return_code</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *extended_code</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *message</parameter>);</programlisting>
<para>
Sets the error reply code. 4xx <parameter>return_code</parameter> is used on
<link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>. 5xx <parameter>return_code</parameter> is used on
<link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>return_code</parameter> is neither 4xx nor 5xx.
</para>
</listitem>
  <listitem>
  <para>
  <parameter>extended_code</parameter> is neither 4.x.x nor 5.x.x.
</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_setreply">
smfi_setreply</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>return_code</parameter>&#160;:</term>
<listitem><simpara>the three-digit SMTP error reply
code. (RFC 2821) Only 4xx and 5xx are
accepted.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extended_code</parameter>&#160;:</term>
<listitem><simpara>the extended reply code (RFC 1893/2034),
or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. Only 4.x.x and 5.x.x are
available.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara>the text part of the SMTP reply, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-setmlreply" role="function">
<title>smfi_setmlreply ()</title>
<indexterm zone="smfi-setmlreply"><primary>smfi_setmlreply</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_setmlreply                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *return_code</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *extended_code</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>
Sets the error reply code. 4xx <parameter>return_code</parameter> is used on
<link linkend="SMFIS-TEMPFAIL:CAPS"><literal>SMFIS_TEMPFAIL</literal></link>. 5xx <parameter>return_code</parameter> is used on
<link linkend="SMFIS-REJECT:CAPS"><literal>SMFIS_REJECT</literal></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>return_code</parameter> is neither 4xx nor 5xx.
</para>
</listitem>
  <listitem>
  <para>
  <parameter>extended_code</parameter> is neither 4.x.x nor 5.x.x.
</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_setmlreply">
smfi_setmlreply</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>return_code</parameter>&#160;:</term>
<listitem><simpara>the three-digit SMTP error reply
code. (RFC 2821) Only 4xx and 5xx are
accepted.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extended_code</parameter>&#160;:</term>
<listitem><simpara>the extended reply code (RFC 1893/2034),
or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. Only 4.x.x and 5.x.x are
available.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara>the single lines of text part of the SMTP reply,
terminated by <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-addheader" role="function">
<title>smfi_addheader ()</title>
<indexterm zone="smfi-addheader"><primary>smfi_addheader</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_addheader                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *value</parameter>);</programlisting>
<para>
Adds a header to the current message's header
list. <link linkend="smfi-addheader"><function>smfi_addheader()</function></link> can be called in <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>name</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</para>
</listitem>
  <listitem>
  <para>
  <parameter>value</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIF-ADDHDRS:CAPS"><literal>SMFIF_ADDHDRS</literal></link> flag isn't set in <link linkend="smfi-register"><function>smfi_register()</function></link> or <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_addheader">
smfi_addheader</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the header name.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>the header value.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-chgheader" role="function">
<title>smfi_chgheader ()</title>
<indexterm zone="smfi-chgheader"><primary>smfi_chgheader</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_chgheader                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> index</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *value</parameter>);</programlisting>
<para>
Changes a header that is located at <parameter>index</parameter> in headers
that all of them are named <parameter>name</parameter>. If <parameter>value</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, the
header is deleted. <link linkend="smfi-chgheader"><function>smfi_chgheader()</function></link> can be called in
<link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>name</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIF-CHGHDRS:CAPS"><literal>SMFIF_CHGHDRS</literal></link> flag isn't set in <link linkend="smfi-register"><function>smfi_register()</function></link> or <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_chgheader">
smfi_chgheader</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the header name.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>the index of headers that all of them are named
<parameter>name</parameter>. (1-based)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>the header value. Use <link linkend="NULL:CAPS"><literal>NULL</literal></link> to delete the target
header.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-insheader" role="function">
<title>smfi_insheader ()</title>
<indexterm zone="smfi-insheader"><primary>smfi_insheader</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_insheader                      (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> index</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *value</parameter>);</programlisting>
<para>
Inserts a header to <parameter>index</parameter> in headers. <link linkend="smfi-insheader"><function>smfi_insheader()</function></link>
can be called in <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>name</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</para>
</listitem>
  <listitem>
  <para>
  <parameter>value</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIF-ADDHDRS:CAPS"><literal>SMFIF_ADDHDRS</literal></link> flag isn't set in <link linkend="smfi-register"><function>smfi_register()</function></link> or <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_insheader">
smfi_insheader</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>the index of inserted header. 0 means that the
header is prepended.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the header name.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>the header value.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-chgfrom" role="function">
<title>smfi_chgfrom ()</title>
<indexterm zone="smfi-chgfrom"><primary>smfi_chgfrom</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_chgfrom                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *mail</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *arguments</parameter>);</programlisting>
<para>
Changes a sender address. <link linkend="smfi-chgfrom"><function>smfi_chgfrom()</function></link> can be called in
<link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>mail</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIF-CHGFROM:CAPS"><literal>SMFIF_CHGFROM</literal></link> flag isn't set in <link linkend="smfi-register"><function>smfi_register()</function></link> or <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_chgfrom">
smfi_chgfrom</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mail</parameter>&#160;:</term>
<listitem><simpara>the new sender address.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arguments</parameter>&#160;:</term>
<listitem><simpara>the extra arguments for ESMTP.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-addrcpt" role="function">
<title>smfi_addrcpt ()</title>
<indexterm zone="smfi-addrcpt"><primary>smfi_addrcpt</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_addrcpt                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *recipient</parameter>);</programlisting>
<para>
Adds a recipient address. <link linkend="smfi-addrcpt"><function>smfi_addrcpt()</function></link> can be called in
<link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>recipient</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIF-ADDRCPT:CAPS"><literal>SMFIF_ADDRCPT</literal></link> flag isn't set in <link linkend="smfi-register"><function>smfi_register()</function></link> or <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_addrcpt">
smfi_addrcpt</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recipient</parameter>&#160;:</term>
<listitem><simpara>the new recipient address.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-addrcpt-par" role="function">
<title>smfi_addrcpt_par ()</title>
<indexterm zone="smfi-addrcpt-par"><primary>smfi_addrcpt_par</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_addrcpt_par                    (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *recipient</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *arguments</parameter>);</programlisting>
<para>
Adds a recipient address with extra ESMTP
arguments. <link linkend="smfi-addrcpt-par"><function>smfi_addrcpt_par()</function></link> can be called in
<link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>recipient</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIF-ADDRCPT-PAR:CAPS"><literal>SMFIF_ADDRCPT_PAR</literal></link> flag isn't set in <link linkend="smfi-register"><function>smfi_register()</function></link> or <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_addrcpt_par">
smfi_addrcpt_par</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recipient</parameter>&#160;:</term>
<listitem><simpara>the recipient address.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arguments</parameter>&#160;:</term>
<listitem><simpara>the extra arguments for ESMTP.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-delrcpt" role="function">
<title>smfi_delrcpt ()</title>
<indexterm zone="smfi-delrcpt"><primary>smfi_delrcpt</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_delrcpt                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *recipient</parameter>);</programlisting>
<para>
Deletes a recipient address. <link linkend="smfi-delrcpt"><function>smfi_delrcpt()</function></link> can be called in
<link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>recipient</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIF-DELRCPT:CAPS"><literal>SMFIF_DELRCPT</literal></link> flag isn't set in <link linkend="smfi-register"><function>smfi_register()</function></link> or <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_delrcpt">
smfi_delrcpt</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recipient</parameter>&#160;:</term>
<listitem><simpara>the recipient address.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-progress" role="function">
<title>smfi_progress ()</title>
<indexterm zone="smfi-progress"><primary>smfi_progress</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_progress                       (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);</programlisting>
<para>
Keeps the current connection. <link linkend="smfi-progress"><function>smfi_progress()</function></link> can be called in
<link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_progress">
smfi_progress</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-replacebody" role="function">
<title>smfi_replacebody ()</title>
<indexterm zone="smfi-replacebody"><primary>smfi_replacebody</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_replacebody                    (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *new_body</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> new_body_size</parameter>);</programlisting>
<para>
Replaces the current body data with
<parameter>new_body</parameter>. <link linkend="smfi-replacebody"><function>smfi_replacebody()</function></link> can be called in
<link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>new_body</parameter> == <link linkend="NULL:CAPS"><literal>NULL</literal></link> and <parameter>new_body_size</parameter> &amp;gt; 0. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIF-CHGBODY:CAPS"><literal>SMFIF_CHGBODY</literal></link> flag isn't set in <link linkend="smfi-register"><function>smfi_register()</function></link> or <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_replacebody">
smfi_replacebody</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_body</parameter>&#160;:</term>
<listitem><simpara>the new body data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_body_size</parameter>&#160;:</term>
<listitem><simpara>the size of <parameter>new_body</parameter>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-quarantine" role="function">
<title>smfi_quarantine ()</title>
<indexterm zone="smfi-quarantine"><primary>smfi_quarantine</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_quarantine                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *reason</parameter>);</programlisting>
<para>
Quarantines the current message with
<parameter>reason</parameter>. <link linkend="smfi-quarantine"><function>smfi_quarantine()</function></link> can be called in <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>reason</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link> or empty. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-eom"><function>xxfi_eom()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  <link linkend="SMFIF-QUARANTINE:CAPS"><literal>SMFIF_QUARANTINE</literal></link> flag isn't set in <link linkend="smfi-register"><function>smfi_register()</function></link> or <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_quarantine">
smfi_quarantine</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&#160;:</term>
<listitem><simpara>the quarantine reason.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-setpriv" role="function">
<title>smfi_setpriv ()</title>
<indexterm zone="smfi-setpriv"><primary>smfi_setpriv</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_setpriv                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *data</parameter>);</programlisting>
<para>
Sets the private data.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>context</parameter> is invalid. FIXME: not-implemented yet.
</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_setpriv">
smfi_setpriv</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the private data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-getpriv" role="function">
<title>smfi_getpriv ()</title>
<indexterm zone="smfi-getpriv"><primary>smfi_getpriv</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link> *              smfi_getpriv                        (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>);</programlisting>
<para>
Gets the private data.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>context</parameter> is invalid. FIXME: not-implemented yet.
</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_getpriv">
smfi_getpriv</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the private data set by <link linkend="smfi-setpriv"><function>smfi_setpriv()</function></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="smfi-setsymlist" role="function">
<title>smfi_setsymlist ()</title>
<indexterm zone="smfi-setsymlist"><primary>smfi_setsymlist</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 smfi_setsymlist                     (<parameter><link linkend="SMFICTX:CAPS"><type>SMFICTX</type></link> *context</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> state</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *macros</parameter>);</programlisting>
<para>
Sets the list of requested macros. <link linkend="smfi-setsymlist"><function>smfi_setsymlist()</function></link> can
be called in <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>.
</para>
<para>Here are the fail conditions:</para>

<itemizedlist>
  <listitem>
  <para>
  <parameter>state</parameter> is not a valid value. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  <parameter>macros</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link> or empty. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  the macro list for <parameter>state</parameter> has been set before. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>
  called in except <link linkend="xxfi-negotiate"><function>xxfi_negotiate()</function></link>. FIXME: not-implemented yet.
</para>
</listitem>
  <listitem>
  <para>network error is occurred.</para>
</listitem>
</itemizedlist>
<para>
See also <ulink
url="https://www.milter.org/developers/api/smfi_setsymlist">
smfi_setsymlist</ulink> on milter.org.
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara>the context for the current milter session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara>the state defined as SMFIM_XXX like <link linkend="SMFIM-CONNECT:CAPS"><literal>SMFIM_CONNECT</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>macros</parameter>&#160;:</term>
<listitem><simpara>the space separated macro names like
"{rcpt_mailer} {rcpt_host}".</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="MI-SUCCESS:CAPS"><literal>MI_SUCCESS</literal></link> if success, <link linkend="MI-FAILURE:CAPS"><literal>MI_FAILURE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
