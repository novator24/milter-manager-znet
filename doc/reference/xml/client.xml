<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="milter-manager-Client-library">
<refmeta>
<refentrytitle role="top_of_page" id="milter-manager-Client-library.top_of_page">Client library</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  MILTER-MANAGER Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Client library</refname>
<refpurpose>The client library to implement a milter.</refpurpose>
</refnamediv>

<refsynopsisdiv id="milter-manager-Client-library.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="MilterClient"/>
<synopsis>#define             <link linkend="MILTER-CLIENT-ERROR:CAPS">MILTER_CLIENT_ERROR</link>
enum                <link linkend="MilterClientError">MilterClientError</link>;
                    <link linkend="MilterClient-struct">MilterClient</link>;
<link linkend="GQuark"><returnvalue>GQuark</returnvalue></link>              <link linkend="milter-client-error-quark">milter_client_error_quark</link>           (<parameter><type>void</type></parameter>);
<link linkend="MilterClient"><returnvalue>MilterClient</returnvalue></link> *      <link linkend="milter-client-new">milter_client_new</link>                   (<parameter><type>void</type></parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="milter-client-get-default-connection-spec">milter_client_get_default_connection_spec</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="milter-client-set-connection-spec">milter_client_set_connection_spec</link>   (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *spec</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="GIOChannel"><returnvalue>GIOChannel</returnvalue></link> *        <link linkend="milter-client-get-listen-channel">milter_client_get_listen_channel</link>    (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="milter-client-set-listen-channel">milter_client_set_listen_channel</link>    (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="GIOChannel"><type>GIOChannel</type></link> *channel</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="milter-client-set-listen-backlog">milter_client_set_listen_backlog</link>    (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> backlog</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="milter-client-is-remove-unix-socket-on-create">milter_client_is_remove_unix_socket_on_create</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="milter-client-set-remove-unix-socket-on-create">milter_client_set_remove_unix_socket_on_create</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> remove</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="milter-client-set-timeout">milter_client_set_timeout</link>           (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> timeout</parameter>);
<link linkend="guint"><returnvalue>guint</returnvalue></link>               <link linkend="milter-client-get-unix-socket-mode">milter_client_get_unix_socket_mode</link>  (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
<link linkend="guint"><returnvalue>guint</returnvalue></link>               <link linkend="milter-client-get-default-unix-socket-mode">milter_client_get_default_unix_socket_mode</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="milter-client-set-default-unix-socket-mode">milter_client_set_default_unix_socket_mode</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> mode</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="milter-client-get-unix-socket-group">milter_client_get_unix_socket_group</link> (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="milter-client-get-default-unix-socket-group">milter_client_get_default_unix_socket_group</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="milter-client-set-default-unix-socket-group">milter_client_set_default_unix_socket_group</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *group</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="milter-client-is-remove-unix-socket-on-close">milter_client_is_remove_unix_socket_on_close</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="milter-client-get-default-remove-unix-socket-on-close">milter_client_get_default_remove_unix_socket_on_close</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="milter-client-set-default-remove-unix-socket-on-close">milter_client_set_default_remove_unix_socket_on_close</link>
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> remove</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="milter-client-main">milter_client_main</link>                  (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="milter-client-shutdown">milter_client_shutdown</link>              (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);
</synopsis>
</refsynopsisdiv>
<refsect1 id="milter-manager-Client-library.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----MilterClient
</synopsis>
</refsect1>
<refsect1 id="milter-manager-Client-library.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
MilterClient implements
 <link linkend="MilterErrorEmittable">MilterErrorEmittable</link>.</para>
</refsect1>
<refsect1 id="milter-manager-Client-library.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="MilterClient--connection-spec">connection-spec</link>&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read
  &quot;<link linkend="MilterClient--custom-fork">custom-fork</link>&quot;              <link linkend="gpointer"><type>gpointer</type></link>              : Read / Write
  &quot;<link linkend="MilterClient--default-packet-buffer-size">default-packet-buffer-size</link>&quot; <link linkend="guint"><type>guint</type></link>                 : Read / Write
  &quot;<link linkend="MilterClient--event-loop">event-loop</link>&quot;               <link linkend="MilterEventLoop"><type>MilterEventLoop</type></link>*      : Read
  &quot;<link linkend="MilterClient--event-loop-backend">event-loop-backend</link>&quot;       <link linkend="MilterClientEventLoopBackend"><type>MilterClientEventLoopBackend</type></link>  : Read / Write
  &quot;<link linkend="MilterClient--maintenance-interval">maintenance-interval</link>&quot;     <link linkend="guint"><type>guint</type></link>                 : Read / Write
  &quot;<link linkend="MilterClient--max-pending-finished-sessions">max-pending-finished-sessions</link>&quot; <link linkend="guint"><type>guint</type></link>                 : Read / Write
  &quot;<link linkend="MilterClient--n-workers">n-workers</link>&quot;                <link linkend="guint"><type>guint</type></link>                 : Read / Write
  &quot;<link linkend="MilterClient--pid-file">pid-file</link>&quot;                 <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="MilterClient--remove-pid-file-on-exit">remove-pid-file-on-exit</link>&quot;  <link linkend="gboolean"><type>gboolean</type></link>              : Read / Write
  &quot;<link linkend="MilterClient--run-as-daemon">run-as-daemon</link>&quot;            <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="MilterClient--start-syslog">start-syslog</link>&quot;             <link linkend="gboolean"><type>gboolean</type></link>              : Write
  &quot;<link linkend="MilterClient--syslog-facility">syslog-facility</link>&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="MilterClient--syslog-identify">syslog-identify</link>&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="MilterClient--worker-id">worker-id</link>&quot;                <link linkend="guint"><type>guint</type></link>                 : Read
</synopsis>
</refsect1>
<refsect1 id="milter-manager-Client-library.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="MilterClient-connection-established">connection-established</link>&quot;                         : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="MilterClient-event-loop-created">event-loop-created</link>&quot;                             : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="MilterClient-listen-started">listen-started</link>&quot;                                 : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="MilterClient-maintain">maintain</link>&quot;                                       : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="MilterClient-sessions-finished">sessions-finished</link>&quot;                              : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
</synopsis>
</refsect1>

<refsect1 id="milter-manager-Client-library.description" role="desc">
<title role="desc.title">Description</title>
<para>
The milter-client library provides full milter protocol
processing features on client-side. "client-side" means
milter-side not MTA-side.
</para>
<para>
<link linkend="MilterClient"><literal>MilterClient</literal></link> and <link linkend="MilterClientContext"><literal>MilterClientContext</literal></link> is the main
classes in the milter-client library. <link linkend="MilterClient"><literal>MilterClient</literal></link>
accepts n-connections from MTA and each connection is
processed by <link linkend="MilterClientContext"><literal>MilterClientContext</literal></link>.
</para>
<refsect2>
  <title>Usage overview</title>
  <para>
  You need to set connection spec and connect <link linkend="MilterClient-connection-established"><type>&quot;connection-established&quot;</type></link> signal before entering mail loop.
</para>
  <para>
  Connection spec is a entry point of <link linkend="MilterClient"><literal>MilterClient</literal></link> for MTA.  It has 'PROTOCOL:INFORMATION' format. For IPv4 socket, 'inet:PORT', 'inet:PORT&commat;HOST' or 'inet:PORT&commat;[ADDRESS]' are valid formats. For IPv6 socket, 'inet6:PORT', 'inet6:PORT&commat;HOST' or 'inet6:PORT&commat;[ADDRESS]' are valid formats. For UNIX domain socket, 'unix:PATH' is a valid format.
</para>
  <para>
  <link linkend="MilterClient"><literal>MilterClient</literal></link> emits <link linkend="MilterClient-connection-established"><type>&quot;connection-established&quot;</type></link> signal. <link linkend="MilterClientContext"><literal>MilterClientContext</literal></link> setup should be done in the signal. In many cases, you just connect callbacks to the passed <link linkend="MilterClientContext"><literal>MilterClientContext</literal></link>. See <link linkend="MilterClientContext"><literal>MilterClientContext</literal></link> for available signals.
</para>
  <para>
  <link linkend="milter-client-run"><function>milter_client_run()</function></link> is running main loop function. You can enter into main loop after you finish to prepare your <link linkend="MilterClient"><literal>MilterClient</literal></link>.
</para>
  <para>Here is an example codes that uses the milter-client library. See also tool/milter-test-client.c. It is an example milter implementation using the milter-client library.</para>
  <informalexample><programlisting>
#include &lt;stdlib.h&gt;
#include &lt;milter/client.h&gt;

static void
cb_connection_established (MilterClient *client,
                           MilterClientContext *context,
                           gpointer user_data)
{
   connect_to_your_interesting_signals(client, context, user_data);
}

int
main (int argc, char **argv)
{
    gboolean success;
    const gchar spec[] = "inet:10025@localhost";
    MilterClient *client;
    GError *error = NULL;

    milter_init();
    milter_client_init();

    client = milter_client_new();
    if (!milter_client_set_connection_spec(client, spec, &amp;error)) {
        g_print("%s\n", error->message);
        g_error_free(error);
        return EXIT_FAILURE;
    }
    g_signal_connect(client, "connection-established",
                     G_CALLBACK(cb_connection_established), NULL);
    milter_client_run(client);

    milter_client_quit();
    milter_quit();

    return success ? EXIT_SUCCESS : EXIT_FAILURE;
}
</programlisting></informalexample>

</refsect2>

<refsect2>
  <title>Processing model</title>
  <para>
  The libmilter provided by Sendmail uses a thread for each connection model. But the milter-client library doesn't use it. The milter-client library uses two threads. One thread is for <link linkend="MilterClient"><literal>MilterClient</literal></link> and other thread is for <link linkend="MilterClientContext"><literal>MilterClientContext</literal></link><!-- -->s. <link linkend="MilterClient"><literal>MilterClient</literal></link> just accepting connections from MTA and dispatches it in the first thread. Each connection is associated with <link linkend="MilterClientContext"><literal>MilterClientContext</literal></link> and they are processed in the second thread. The milter-client library's model is the same model of memcached. (memcached uses libevent as its event loop backend but the milter-client library uses GLib's <link linkend="GMainLoop"><literal>GMainLoop</literal></link> for it.)
</para>
  <para>
  The libmilter's model will have more cost to accept a connection rather than the milter-client library's model. Because the libmilter's model creates a thread but the milter-client library just allocate <link linkend="MilterClientContext"><literal>MilterClientContext</literal></link>. But in many case, this difference is not bottleneck. :-|
</para>
</refsect2>

</refsect1>
<refsect1 id="milter-manager-Client-library.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="MILTER-CLIENT-ERROR:CAPS" role="macro">
<title>MILTER_CLIENT_ERROR</title>
<indexterm zone="MILTER-CLIENT-ERROR:CAPS"><primary>MILTER_CLIENT_ERROR</primary></indexterm>
<programlisting>#define MILTER_CLIENT_ERROR           (milter_client_error_quark())
</programlisting>
<para>
Used to get the <link linkend="GError"><type>GError</type></link> quark for <link linkend="MilterClient"><type>MilterClient</type></link> errors.
</para></refsect2>
<refsect2 id="MilterClientError" role="enum">
<title>enum MilterClientError</title>
<indexterm zone="MilterClientError"><primary>MilterClientError</primary></indexterm>
<programlisting>typedef enum {
    MILTER_CLIENT_ERROR_RUNNING,
    MILTER_CLIENT_ERROR_UNIX_SOCKET,
    MILTER_CLIENT_ERROR_IO_ERROR,
    MILTER_CLIENT_ERROR_THREAD,
    MILTER_CLIENT_ERROR_PASSWORD_ENTRY,
    MILTER_CLIENT_ERROR_GROUP_ENTRY,
    MILTER_CLIENT_ERROR_DROP_PRIVILEGE,
    MILTER_CLIENT_ERROR_DETACH_IO,
    MILTER_CLIENT_ERROR_DAEMONIZE,
    MILTER_CLIENT_ERROR_NOT_LISTENED_YET,
    MILTER_CLIENT_ERROR_PROCESS,
    MILTER_CLIENT_ERROR_PID_FILE
} MilterClientError;
</programlisting>
<para>
These identify the variable errors that can occur while
calling <link linkend="MilterClient"><literal>MilterClient</literal></link> functions.
</para><variablelist role="enum">
<varlistentry id="MILTER-CLIENT-ERROR-RUNNING:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_RUNNING</literal></term>
<listitem><simpara>Indicates main loop has
been running.
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-UNIX-SOCKET:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_UNIX_SOCKET</literal></term>
<listitem><simpara>Indicates UNIX domain
socket related error.
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-IO-ERROR:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_IO_ERROR</literal></term>
<listitem><simpara>Indicates IO related
error.
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-THREAD:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_THREAD</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-PASSWORD-ENTRY:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_PASSWORD_ENTRY</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-GROUP-ENTRY:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_GROUP_ENTRY</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-DROP-PRIVILEGE:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_DROP_PRIVILEGE</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-DETACH-IO:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_DETACH_IO</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-DAEMONIZE:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_DAEMONIZE</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-NOT-LISTENED-YET:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_NOT_LISTENED_YET</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-PROCESS:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_PROCESS</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry id="MILTER-CLIENT-ERROR-PID-FILE:CAPS" role="constant">
<term><literal>MILTER_CLIENT_ERROR_PID_FILE</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="MilterClient-struct" role="struct">
<title>MilterClient</title>
<indexterm zone="MilterClient-struct"><primary>MilterClient</primary></indexterm>
<programlisting>typedef struct _MilterClient MilterClient;</programlisting>
<para>
<link linkend="MilterClient"><literal>MilterClient</literal></link> is a front object. It accepts connections
from MTA and dispatches it.
</para></refsect2>
<refsect2 id="milter-client-error-quark" role="function">
<title>milter_client_error_quark ()</title>
<indexterm zone="milter-client-error-quark"><primary>milter_client_error_quark</primary></indexterm>
<programlisting><link linkend="GQuark"><returnvalue>GQuark</returnvalue></link>              milter_client_error_quark           (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="milter-client-new" role="function">
<title>milter_client_new ()</title>
<indexterm zone="milter-client-new"><primary>milter_client_new</primary></indexterm>
<programlisting><link linkend="MilterClient"><returnvalue>MilterClient</returnvalue></link> *      milter_client_new                   (<parameter><type>void</type></parameter>);</programlisting>
<para>
Creates a new client.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a new <link linkend="MilterClient"><literal>MilterClient</literal></link> object.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-get-default-connection-spec" role="function">
<title>milter_client_get_default_connection_spec ()</title>
<indexterm zone="milter-client-get-default-connection-spec"><primary>milter_client_get_default_connection_spec</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             milter_client_get_default_connection_spec
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Gets the default connection specification. The default
connection specification should be freed when no longer
needed.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the copy of default connection specification.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-set-connection-spec" role="function">
<title>milter_client_set_connection_spec ()</title>
<indexterm zone="milter-client-set-connection-spec"><primary>milter_client_set_connection_spec</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            milter_client_set_connection_spec   (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *spec</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Sets a connection specification. If <parameter>spec</parameter> is invalid
format and <parameter>error</parameter> is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, error detail is stored
into <parameter>error</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>spec</parameter>&#160;:</term>
<listitem><simpara>a connection specification like inet:10025.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for an error, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-get-listen-channel" role="function">
<title>milter_client_get_listen_channel ()</title>
<indexterm zone="milter-client-get-listen-channel"><primary>milter_client_get_listen_channel</primary></indexterm>
<programlisting><link linkend="GIOChannel"><returnvalue>GIOChannel</returnvalue></link> *        milter_client_get_listen_channel    (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Gets the channel for listening connection.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the listen channel.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-set-listen-channel" role="function">
<title>milter_client_set_listen_channel ()</title>
<indexterm zone="milter-client-set-listen-channel"><primary>milter_client_set_listen_channel</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                milter_client_set_listen_channel    (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="GIOChannel"><type>GIOChannel</type></link> *channel</parameter>);</programlisting>
<para>
Sets a channel for listening connection.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channel</parameter>&#160;:</term>
<listitem><simpara>a channel for listening connection.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-set-listen-backlog" role="function">
<title>milter_client_set_listen_backlog ()</title>
<indexterm zone="milter-client-set-listen-backlog"><primary>milter_client_set_listen_backlog</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                milter_client_set_listen_backlog    (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> backlog</parameter>);</programlisting>
<para>
Sets a backlog for listen(2).
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>backlog</parameter>&#160;:</term>
<listitem><simpara>a backlog for listen(2).</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-is-remove-unix-socket-on-create" role="function">
<title>milter_client_is_remove_unix_socket_on_create ()</title>
<indexterm zone="milter-client-is-remove-unix-socket-on-create"><primary>milter_client_is_remove_unix_socket_on_create</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            milter_client_is_remove_unix_socket_on_create
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Gets whether removing UNIX domain socket before new UNIX
domain socket is created.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if removing UNIX domain socket on create,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-set-remove-unix-socket-on-create" role="function">
<title>milter_client_set_remove_unix_socket_on_create ()</title>
<indexterm zone="milter-client-set-remove-unix-socket-on-create"><primary>milter_client_set_remove_unix_socket_on_create</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                milter_client_set_remove_unix_socket_on_create
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> remove</parameter>);</programlisting>
<para>
Sets whether removing UNIX domain socket before new UNIX
domain socket is created.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remove</parameter>&#160;:</term>
<listitem><simpara><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if removing UNIX domain socket before new
UNIX domain socket is create.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-set-timeout" role="function">
<title>milter_client_set_timeout ()</title>
<indexterm zone="milter-client-set-timeout"><primary>milter_client_set_timeout</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                milter_client_set_timeout           (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> timeout</parameter>);</programlisting>
<para>
Sets the timeout value for established
<link linkend="MilterClientContext"><literal>MilterClientContext</literal></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout</parameter>&#160;:</term>
<listitem><simpara>a timeout by seconds.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-get-unix-socket-mode" role="function">
<title>milter_client_get_unix_socket_mode ()</title>
<indexterm zone="milter-client-get-unix-socket-mode"><primary>milter_client_get_unix_socket_mode</primary></indexterm>
<programlisting><link linkend="guint"><returnvalue>guint</returnvalue></link>               milter_client_get_unix_socket_mode  (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Gets the UNIX domain socket mode.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the UNIX domain socket mode.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-get-default-unix-socket-mode" role="function">
<title>milter_client_get_default_unix_socket_mode ()</title>
<indexterm zone="milter-client-get-default-unix-socket-mode"><primary>milter_client_get_default_unix_socket_mode</primary></indexterm>
<programlisting><link linkend="guint"><returnvalue>guint</returnvalue></link>               milter_client_get_default_unix_socket_mode
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Gets the default UNIX domain socket mode.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the default UNIX domain socket mode.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-set-default-unix-socket-mode" role="function">
<title>milter_client_set_default_unix_socket_mode ()</title>
<indexterm zone="milter-client-set-default-unix-socket-mode"><primary>milter_client_set_default_unix_socket_mode</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                milter_client_set_default_unix_socket_mode
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> mode</parameter>);</programlisting>
<para>
Sets the default UNIX domain socket mode.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>the UNIX domain socket mode.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-get-unix-socket-group" role="function">
<title>milter_client_get_unix_socket_group ()</title>
<indexterm zone="milter-client-get-unix-socket-group"><primary>milter_client_get_unix_socket_group</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       milter_client_get_unix_socket_group (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Gets the group of UNIX domain socket.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the group name for UNIX domain socket.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-get-default-unix-socket-group" role="function">
<title>milter_client_get_default_unix_socket_group ()</title>
<indexterm zone="milter-client-get-default-unix-socket-group"><primary>milter_client_get_default_unix_socket_group</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       milter_client_get_default_unix_socket_group
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Gets the default group of UNIX domain socket.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the default group name for UNIX domain socket.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-set-default-unix-socket-group" role="function">
<title>milter_client_set_default_unix_socket_group ()</title>
<indexterm zone="milter-client-set-default-unix-socket-group"><primary>milter_client_set_default_unix_socket_group</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                milter_client_set_default_unix_socket_group
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *group</parameter>);</programlisting>
<para>
Sets the default group of UNIX domain socket.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>group</parameter>&#160;:</term>
<listitem><simpara>the group name.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-is-remove-unix-socket-on-close" role="function">
<title>milter_client_is_remove_unix_socket_on_close ()</title>
<indexterm zone="milter-client-is-remove-unix-socket-on-close"><primary>milter_client_is_remove_unix_socket_on_close</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            milter_client_is_remove_unix_socket_on_close
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Gets whether removing UNIX domain socket after the socket
is closed.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if removing UNIX domain socket on close,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-get-default-remove-unix-socket-on-close" role="function">
<title>milter_client_get_default_remove_unix_socket_on_close ()</title>
<indexterm zone="milter-client-get-default-remove-unix-socket-on-close"><primary>milter_client_get_default_remove_unix_socket_on_close</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            milter_client_get_default_remove_unix_socket_on_close
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Gets default value whether removing UNIX domain socket
after the socket is closed.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if removing UNIX domain socket on close,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-set-default-remove-unix-socket-on-close" role="function">
<title>milter_client_set_default_remove_unix_socket_on_close ()</title>
<indexterm zone="milter-client-set-default-remove-unix-socket-on-close"><primary>milter_client_set_default_remove_unix_socket_on_close</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                milter_client_set_default_remove_unix_socket_on_close
                                                        (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> remove</parameter>);</programlisting>
<para>
Sets default value whether removing UNIX domain socket
after the socket is closed.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remove</parameter>&#160;:</term>
<listitem><simpara><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if removing UNIX domain socket after the
socket is closed.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-main" role="function" condition="deprecated:1.6.2: Use milter_client_run() instead.">
<title>milter_client_main ()</title>
<indexterm zone="milter-client-main" role="deprecated"><primary>milter_client_main</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            milter_client_main                  (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<warning><para><literal>milter_client_main</literal> has been deprecated since version 1.6.2 and should not be used in newly-written code. Use <link linkend="milter-client-run"><function>milter_client_run()</function></link> instead.</para></warning>
<para>
Runs main loop.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if main loop is quitted successfully,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="milter-client-shutdown" role="function">
<title>milter_client_shutdown ()</title>
<indexterm zone="milter-client-shutdown"><primary>milter_client_shutdown</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                milter_client_shutdown              (<parameter><link linkend="MilterClient"><type>MilterClient</type></link> *client</parameter>);</programlisting>
<para>
Shuts main loop down.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="MilterClient"><literal>MilterClient</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="milter-manager-Client-library.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="MilterClient--connection-spec" role="property"><title>The <literal>&quot;connection-spec&quot;</literal> property</title>
<indexterm zone="MilterClient--connection-spec"><primary>MilterClient:connection-spec</primary></indexterm>
<programlisting>  &quot;connection-spec&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read</programlisting>
<para>The connection spec of the client.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="MilterClient--custom-fork" role="property"><title>The <literal>&quot;custom-fork&quot;</literal> property</title>
<indexterm zone="MilterClient--custom-fork"><primary>MilterClient:custom-fork</primary></indexterm>
<programlisting>  &quot;custom-fork&quot;              <link linkend="gpointer"><type>gpointer</type></link>              : Read / Write</programlisting>
<para>The custom fork.</para></refsect2>
<refsect2 id="MilterClient--default-packet-buffer-size" role="property"><title>The <literal>&quot;default-packet-buffer-size&quot;</literal> property</title>
<indexterm zone="MilterClient--default-packet-buffer-size"><primary>MilterClient:default-packet-buffer-size</primary></indexterm>
<programlisting>  &quot;default-packet-buffer-size&quot; <link linkend="guint"><type>guint</type></link>                 : Read / Write</programlisting>
<para>The default packet buffer size of each client context of the client.</para><para>Default value: 0</para>
</refsect2>
<refsect2 id="MilterClient--event-loop" role="property"><title>The <literal>&quot;event-loop&quot;</literal> property</title>
<indexterm zone="MilterClient--event-loop"><primary>MilterClient:event-loop</primary></indexterm>
<programlisting>  &quot;event-loop&quot;               <link linkend="MilterEventLoop"><type>MilterEventLoop</type></link>*      : Read</programlisting>
<para>The event loop of the client.</para></refsect2>
<refsect2 id="MilterClient--event-loop-backend" role="property"><title>The <literal>&quot;event-loop-backend&quot;</literal> property</title>
<indexterm zone="MilterClient--event-loop-backend"><primary>MilterClient:event-loop-backend</primary></indexterm>
<programlisting>  &quot;event-loop-backend&quot;       <link linkend="MilterClientEventLoopBackend"><type>MilterClientEventLoopBackend</type></link>  : Read / Write</programlisting>
<para>The event loop backend of the client.</para><para>Default value: MILTER_CLIENT_EVENT_LOOP_BACKEND_DEFAULT</para>
</refsect2>
<refsect2 id="MilterClient--maintenance-interval" role="property"><title>The <literal>&quot;maintenance-interval&quot;</literal> property</title>
<indexterm zone="MilterClient--maintenance-interval"><primary>MilterClient:maintenance-interval</primary></indexterm>
<programlisting>  &quot;maintenance-interval&quot;     <link linkend="guint"><type>guint</type></link>                 : Read / Write</programlisting>
<para>Maintenance interval of the client. each 'maintenance-interval' sessions finished 'maintenance' signal is emitted. 0 means 'disabled'.</para><para>Default value: 0</para>
</refsect2>
<refsect2 id="MilterClient--max-pending-finished-sessions" role="property"><title>The <literal>&quot;max-pending-finished-sessions&quot;</literal> property</title>
<indexterm zone="MilterClient--max-pending-finished-sessions"><primary>MilterClient:max-pending-finished-sessions</primary></indexterm>
<programlisting>  &quot;max-pending-finished-sessions&quot; <link linkend="guint"><type>guint</type></link>                 : Read / Write</programlisting>
<para>The maximum number of pending finished sessions of the client.</para><para>Default value: 0</para>
</refsect2>
<refsect2 id="MilterClient--n-workers" role="property"><title>The <literal>&quot;n-workers&quot;</literal> property</title>
<indexterm zone="MilterClient--n-workers"><primary>MilterClient:n-workers</primary></indexterm>
<programlisting>  &quot;n-workers&quot;                <link linkend="guint"><type>guint</type></link>                 : Read / Write</programlisting>
<para>The Number of worker processes of the client.</para><para>Allowed values: &lt;= 1000</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="MilterClient--pid-file" role="property"><title>The <literal>&quot;pid-file&quot;</literal> property</title>
<indexterm zone="MilterClient--pid-file"><primary>MilterClient:pid-file</primary></indexterm>
<programlisting>  &quot;pid-file&quot;                 <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>The PID file of the client.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="MilterClient--remove-pid-file-on-exit" role="property"><title>The <literal>&quot;remove-pid-file-on-exit&quot;</literal> property</title>
<indexterm zone="MilterClient--remove-pid-file-on-exit"><primary>MilterClient:remove-pid-file-on-exit</primary></indexterm>
<programlisting>  &quot;remove-pid-file-on-exit&quot;  <link linkend="gboolean"><type>gboolean</type></link>              : Read / Write</programlisting>
<para>Whether removing PID file of the client on exist.</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="MilterClient--run-as-daemon" role="property"><title>The <literal>&quot;run-as-daemon&quot;</literal> property</title>
<indexterm zone="MilterClient--run-as-daemon"><primary>MilterClient:run-as-daemon</primary></indexterm>
<programlisting>  &quot;run-as-daemon&quot;            <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>Whether running the client as a daemon or not.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="MilterClient--start-syslog" role="property"><title>The <literal>&quot;start-syslog&quot;</literal> property</title>
<indexterm zone="MilterClient--start-syslog"><primary>MilterClient:start-syslog</primary></indexterm>
<programlisting>  &quot;start-syslog&quot;             <link linkend="gboolean"><type>gboolean</type></link>              : Write</programlisting>
<para>Start syslog for the client.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="MilterClient--syslog-facility" role="property"><title>The <literal>&quot;syslog-facility&quot;</literal> property</title>
<indexterm zone="MilterClient--syslog-facility"><primary>MilterClient:syslog-facility</primary></indexterm>
<programlisting>  &quot;syslog-facility&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>Syslog facility name of the client.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="MilterClient--syslog-identify" role="property"><title>The <literal>&quot;syslog-identify&quot;</literal> property</title>
<indexterm zone="MilterClient--syslog-identify"><primary>MilterClient:syslog-identify</primary></indexterm>
<programlisting>  &quot;syslog-identify&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>Syslog identify of the client.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="MilterClient--worker-id" role="property"><title>The <literal>&quot;worker-id&quot;</literal> property</title>
<indexterm zone="MilterClient--worker-id"><primary>MilterClient:worker-id</primary></indexterm>
<programlisting>  &quot;worker-id&quot;                <link linkend="guint"><type>guint</type></link>                 : Read</programlisting>
<para>The ID of worker processes of the client.</para><para>Allowed values: &lt;= 1000</para>
<para>Default value: 0</para>
</refsect2>
</refsect1>
<refsect1 id="milter-manager-Client-library.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="MilterClient-connection-established" role="signal"><title>The <literal>&quot;connection-established&quot;</literal> signal</title>
<indexterm zone="MilterClient-connection-established"><primary>MilterClient::connection-established</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="MilterClient"><type>MilterClient</type></link>        *milterclient,
                                                        <link linkend="MilterClientContext"><type>MilterClientContext</type></link> *arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link>             user_data)         : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>milterclient</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="MilterClient-event-loop-created" role="signal"><title>The <literal>&quot;event-loop-created&quot;</literal> signal</title>
<indexterm zone="MilterClient-event-loop-created"><primary>MilterClient::event-loop-created</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="MilterClient"><type>MilterClient</type></link>    *milterclient,
                                                        <link linkend="MilterEventLoop"><type>MilterEventLoop</type></link> *arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link>         user_data)         : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>milterclient</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="MilterClient-listen-started" role="signal"><title>The <literal>&quot;listen-started&quot;</literal> signal</title>
<indexterm zone="MilterClient-listen-started"><primary>MilterClient::listen-started</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="MilterClient"><type>MilterClient</type></link> *milterclient,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      arg1,
                                                        <link linkend="guint"><type>guint</type></link>         arg2,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)         : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>milterclient</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="MilterClient-maintain" role="signal"><title>The <literal>&quot;maintain&quot;</literal> signal</title>
<indexterm zone="MilterClient-maintain"><primary>MilterClient::maintain</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="MilterClient"><type>MilterClient</type></link> *milterclient,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)         : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>milterclient</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="MilterClient-sessions-finished" role="signal"><title>The <literal>&quot;sessions-finished&quot;</literal> signal</title>
<indexterm zone="MilterClient-sessions-finished"><primary>MilterClient::sessions-finished</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="MilterClient"><type>MilterClient</type></link> *milterclient,
                                                        <link linkend="guint"><type>guint</type></link>         arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)         : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>milterclient</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>

</refentry>
